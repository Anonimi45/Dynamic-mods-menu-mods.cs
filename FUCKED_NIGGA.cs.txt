using Menu;
using Misc;
using Photon.Pun;
using POpusCodec.Enums;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Thermo_Template.Misc;
using UnityEngine;
using UnityEngine.XR;
using static Misc.Variables;
using Dynamic_Mods.Utilities;
using Object = UnityEngine.Object;
using ExitGames.Client.Photon;
using Dynamic_Mods.UI;
using GorillaNetworking;
using RigStuff;
using GorillaLocomotion.Gameplay;
using GorillaExtensions;
using Steamworks;
using HarmonyLib;
using System.Reflection;
using GorillaTag;
using static UnityEngine.UI.GridLayoutGroup;
using Photon.Pun.UtilityScripts;
using System.IO;
using static MonoMod.Cil.RuntimeILReferenceBag.FastDelegateInvokers;
using Oculus.Interaction.HandGrab;
using UnityEngine.AI;
using UnityEngine.Animations.Rigging;
using GorillaTagScripts;
using UnityEngine.XR.Interaction.Toolkit;
using Photon.Voice.Unity;
using System.ComponentModel;
using UnityEngine.UIElements;
using OVRSimpleJSON;
using System.Threading;
using UnityEngine.InputSystem.HID;
using System.Runtime.InteropServices;
using TMPro;
using Random = UnityEngine.Random;
using UnityEngine.UI;
using PlayFab.ClientModels;
using PlayFab;
using System.Text.RegularExpressions;
using System.Diagnostics;
using Photon.Voice.Unity.UtilityScripts;
using UnityEngine.InputSystem;
using PlayFab.Internal;
using BepInEx;
using Oculus.Interaction;
using static NetworkSystem;
using Valve.VR;
using Unity.Burst.Intrinsics;
using UnityEngine.SceneManagement;
using GTAG_NotificationLib;

namespace Thermo_Template.Mods
{
    internal class ActualMods
    {


        public static bool oiwefkwenfjk;










        public static void ClearNotifs()
        {
            NotifiLib.ClearAllNotifications();
        }

        private static float Timer;

        public static void AntiReport3()
        {
            bool inRoom = PhotonNetwork.InRoom;
            if (inRoom)
            {
                Timer += 0.125f;
                bool flag = Timer > 1f;
                if (flag)
                {
                    foreach (GorillaPlayerScoreboardLine gorillaPlayerScoreboardLine in Object.FindObjectsOfType<GorillaPlayerScoreboardLine>())
                    {
                        bool flag2 = gorillaPlayerScoreboardLine.linePlayer.UserId == NetworkSystem.Instance.LocalPlayer.UserId;
                        if (flag2)
                        {
                            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                            {
                                bool flag3 = vrrig != GorillaTagger.Instance.offlineVRRig;
                                if (flag3)
                                {
                                    float num = gorillaPlayerScoreboardLine.reportButton.gameObject.transform.localScale.y * 0.03f;
                                    bool flag4 = Vector3.Distance(vrrig.rightHandTransform.position + vrrig.rightHandTransform.forward * 0.1f, gorillaPlayerScoreboardLine.reportButton.gameObject.transform.position) < num || Vector3.Distance(vrrig.leftHandTransform.position + vrrig.leftHandTransform.forward * 0.1f, gorillaPlayerScoreboardLine.reportButton.gameObject.transform.position) < num;
                                    if (flag4)
                                    {
                                        PhotonNetwork.Disconnect();
                                        NotifiLib.SendNotification("[DYNAMIC MODS] You Have Been Disconnected, someone tried reporting you.");
                                    }
                                }
                            }
                        }
                    }
                    Timer = 0f;
                }
            }
        }


        public static void SpeedMosa()
        {
            GorillaLocomotion.Player.Instance.jumpMultiplier = 1.7f;
            GorillaLocomotion.Player.Instance.maxJumpSpeed = 7.5f;
        }

        public static void SpeedCoke()
        {
            GorillaLocomotion.Player.Instance.jumpMultiplier = 1.7f;
            GorillaLocomotion.Player.Instance.maxJumpSpeed = 8.5f;
        }

        public static void PopAllBalloons()
        {
            foreach (BalloonHoldable balloon in GameObject.FindObjectsOfType<BalloonHoldable>())
            {
                Vector3 startpos = balloon.gameObject.transform.position;
                Vector3 charvel = Vector3.zero;


            }
        }


        public static void FastSwim()
        {
            if (GorillaLocomotion.Player.Instance.InWater)
            {
                GorillaLocomotion.Player.Instance.gameObject.GetComponent<Rigidbody>().velocity *= 1.069f;
            }
        }


        public static void NameChangeAll()
        {
            if (NameChangerString == null)
            {
                if (SettingNameDelay < Time.time)
                {
                    SettingNameDelay = Time.time + 5f;
                    return;
                }
            }
            if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED"))
            {
                return;
            }
            if (NameDelay < Time.time)
            {
                NameDelay = Time.time + 0.05f;
                foreach (Player p in PhotonNetwork.PlayerList)
                {
                    Hashtable hashtable = new Hashtable();
                    hashtable[byte.MaxValue] = NameChangerString;
                    Dictionary<byte, object> dictionary = new Dictionary<byte, object>();
                    dictionary.Add(251, hashtable);
                    dictionary.Add(254, p.ActorNumber);
                    dictionary.Add(250, true);
                    PhotonNetwork.CurrentRoom.LoadBalancingClient.LoadBalancingPeer.SendOperation(252, dictionary, SendOptions.SendUnreliable);
                }
            }
        }


        public static float NameDelay;

        public static float SettingNameDelay;

        public static string NameChangerString = null;


        public static void insane()
        {
            GorillaLocomotion.Player.Instance.jumpMultiplier = 99999999999999999999999999999999999999f;
            GorillaLocomotion.Player.Instance.maxJumpSpeed = 99999999999999999999999999999999999999f;
        }


        public static void playSound4(int ID = 0, bool left = false, float volume = 0.5f) // siren spam
        {
            bool inRoom = PhotonNetwork.InRoom;
            if (inRoom)
            {
                bool flag = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag)
                {
                    GorillaTagger.Instance.myVRRig.RPC("PlayHandTap", RpcTarget.All, new object[]
                    {
                        48 + Time.frameCount / 30 % 2 * 2,
                        left,
                        volume
                    });
                }
                NewFlusher();
            }
            else
            {
                bool flag2 = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag2)
                {
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(48 + Time.frameCount / 30 % 2 * 2, true, 1f);
                }
            }
        }


        public static void playSound3(int ID = 0, bool left = false, float volume = 0.5f) // earblast
        {
            bool inRoom = PhotonNetwork.InRoom;
            if (inRoom)
            {
                bool flag = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag)
                {
                    GorillaTagger.Instance.myVRRig.RPC("PlayHandTap", RpcTarget.All, new object[]
                    {
                        215,
                        left,
                        volume
                    });
                }
                NewFlusher();
            }
            else
            {
                bool flag2 = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag2)
                {
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(215, true, 1f);
                }
            }
        }


        public static void playSound2(int ID = 0, bool left = false, float volume = 0.5f) // big crystal
        {
            bool inRoom = PhotonNetwork.InRoom;
            if (inRoom)
            {
                bool flag = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag)
                {
                    GorillaTagger.Instance.myVRRig.RPC("PlayHandTap", RpcTarget.All, new object[]
                    {
                        213,
                        left,
                        volume
                    });
                }
                NewFlusher();
            }
            else
            {
                bool flag2 = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag2)
                {
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(213, true, 1f);
                }
            }
        }


        public static void playSound(int ID = 0, bool left = false, float volume = 0.5f) // handtap
        {
            bool inRoom = PhotonNetwork.InRoom;
            if (inRoom)
            {
                bool flag = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag)
                {
                    GorillaTagger.Instance.myVRRig.RPC("PlayHandTap", RpcTarget.All, new object[]
                    {
                        ID,
                        left,
                        volume
                    });
                }
                NewFlusher();
            }
            else
            {
                bool flag2 = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
                if (flag2)
                {
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(ID, left, volume);
                }
            }
        }

        public static bool CheckMaster()
        {
            return PhotonNetwork.InRoom && PhotonNetwork.LocalPlayer.IsMasterClient;
        }


        public static void GrabMonstersL()
        {
            bool flag = !Thermo_Template.Mods.CheckMaster();
            if (flag)
            {
                foreach (MonkeyeAI monkeyeAI in UnityEngine.Object.FindObjectsOfType<MonkeyeAI>())
                {
                    monkeyeAI.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                }
            }
            else
            {
                NotifiLib.SendNotification("<color=cyan>[DYNAMIC MODS]<color> Turn On Master!");
            }
        }


        public static void GrabMonstersR()
        {
            bool flag = !Thermo_Template.Mods.CheckMaster();
            if (flag)
            {
                foreach (MonkeyeAI monkeyeAI in UnityEngine.Object.FindObjectsOfType<MonkeyeAI>())
                {
                    monkeyeAI.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                }
            }
            else
            {
                NotifiLib.SendNotification("<color=cyan>[DYNAMIC MODS]<color> Turn on Set Master!");
            }
        }

        public static void NamechangeallDynamic()
        {
            foreach (Player player in PhotonNetwork.PlayerList)
            {
                bool flag = PhotonNetwork.LocalPlayer == PhotonNetwork.MasterClient;
                if (flag)
                {
                    Hashtable hashtable = new Hashtable();
                    hashtable[byte.MaxValue] = "DYNAMIC";
                    Dictionary<byte, object> dictionary = new Dictionary<byte, object>();
                    dictionary.Add(251, hashtable);
                    dictionary.Add(254, player.ActorNumber);
                    dictionary.Add(250, true);
                    PhotonNetwork.CurrentRoom.LoadBalancingClient.LoadBalancingPeer.SendOperation(252, dictionary, SendOptions.SendUnreliable);
                    NotifiLib.SendNotification("Look at the Leaderboard!");
                }
                else
                {
                    NotifiLib.SendNotification("<color=cyan>[DYNAMIC MODS]<color> Turn On AntiBan and Set Master!");
                }
            }
        }


        public static void NamechangeallNothing()
        {
            foreach (Player player in PhotonNetwork.PlayerList)
            {
                bool flag = PhotonNetwork.LocalPlayer == PhotonNetwork.MasterClient;
                if (flag)
                {
                    Hashtable hashtable = new Hashtable();
                    hashtable[byte.MaxValue] = "_____";
                    Dictionary<byte, object> dictionary = new Dictionary<byte, object>();
                    dictionary.Add(251, hashtable);
                    dictionary.Add(254, player.ActorNumber);
                    dictionary.Add(250, true);
                    PhotonNetwork.CurrentRoom.LoadBalancingClient.LoadBalancingPeer.SendOperation(252, dictionary, SendOptions.SendUnreliable);
                    NotifiLib.SendNotification("Look at the Leaderboard!");
                }
                else
                {
                    NotifiLib.SendNotification("<color=cyan>[DYNAMIC MODS]<color> Turn On AntiBan and Set Master!");
                }
            }
        }


        public static void ProjectileSpammer6(string projectile = "ScienceCandy")
        {

            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {

                Vector3 rightGrabPosition = ControllerInputPoller.instance.rightControllerPosition;


                Vector3 projectileDirection = GorillaLocomotion.Player.Instance.headCollider.transform.forward - GorillaLocomotion.Player.Instance.rightControllerTransform.up * Dynamic_Mods.Mods.projectilestuff.projectileSpeed;


                Dynamic_Mods.Mods.projectilestuff.Projectile(projectile, rightGrabPosition, projectileDirection, Dynamic_Mods.Mods.projectilestuff.projColor, false);
            }
        }


        public static void ProjectileSpammer5(string projectile = "ThrowableGift")
        {

            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {

                Vector3 rightGrabPosition = ControllerInputPoller.instance.rightControllerPosition;


                Vector3 projectileDirection = GorillaLocomotion.Player.Instance.headCollider.transform.forward - GorillaLocomotion.Player.Instance.rightControllerTransform.up * projectilestuff.projectileSpeed;


                Dynamic_Mods.Mods.projectilestuff.Projectile(projectile, rightGrabPosition, projectileDirection, Dynamic_Mods.Mods.projectilestuff.projColor, false);
            }
        }


        public static void ProjectileSpammer4(string projectile = "FishFood")
        {

            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {

                Vector3 rightGrabPosition = ControllerInputPoller.instance.rightControllerPosition;


                Vector3 projectileDirection = GorillaLocomotion.Player.Instance.headCollider.transform.forward - GorillaLocomotion.Player.Instance.rightControllerTransform.up * projectilestuff.projectileSpeed;


                Dynamic_Mods.Mods.projectilestuff.Projectile(projectile, rightGrabPosition, projectileDirection, projectilestuff.projColor, false);
            }
        }


        public static void ProjectileSpammer3(string projectile = "LavaRock")
        {

            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {

                Vector3 rightGrabPosition = ControllerInputPoller.instance.rightControllerPosition;


                Vector3 projectileDirection = GorillaLocomotion.Player.Instance.headCollider.transform.forward - GorillaLocomotion.Player.Instance.rightControllerTransform.up * Dynamic_Mods.Mods.projectilestuff.projectileSpeed;


                Dynamic_Mods.Mods.projectilestuff.Projectile(projectile, rightGrabPosition, projectileDirection, projectilestuff.projColor, false);
            }
        }


        public static void ProjectileSpammer1(string projectile = "WaterBalloon")
        {

            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {

                Vector3 rightGrabPosition = ControllerInputPoller.instance.rightControllerPosition;


                Vector3 projectileDirection = GorillaLocomotion.Player.Instance.headCollider.transform.forward - GorillaLocomotion.Player.Instance.rightControllerTransform.up * projectilestuff.projectileSpeed;


                projectilestuff.Projectile(projectile, rightGrabPosition, projectileDirection, projectilestuff.projColor, false);
            }
        }


        public static void ProjectileSpammer2(string projectile = "Snowball")
        {

            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {

                Vector3 rightGrabPosition = ControllerInputPoller.instance.rightControllerPosition;


                Vector3 projectileDirection = GorillaLocomotion.Player.Instance.headCollider.transform.forward - GorillaLocomotion.Player.Instance.rightControllerTransform.up * projectilestuff.projectileSpeed;


                projectilestuff.Projectile(projectile, rightGrabPosition, projectileDirection, projectilestuff.projColor, false);
            }
        }




        public static void FakeUnbanSelf()
        {
            foreach (GorillaLevelScreen gorillaLevelScreen in GorillaComputer.instance.levelScreens)
            {
                gorillaLevelScreen.UpdateText(gorillaLevelScreen.startingText, true);
            }
            GorillaScoreboardTotalUpdater.instance.ClearOfflineFailureText();
            GorillaComputer.instance.screenText.DisableFailedState();
            GorillaComputer.instance.functionSelectText.DisableFailedState();
        }


        public static string[] Gliders = new string[]
        {
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (1)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (4)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (5)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (6)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (7)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (8)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (9)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (10)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (11)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (12)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (17)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (18)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (19)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (20)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (21)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (23)/GliderHoldable",
            "Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (24)/GliderHoldable"
        };


        public static int GliderValue = 0;


        public static void LockRoomUndetected()
        {
            Hashtable hashtable = new Hashtable();
            hashtable.Add(byte.MaxValue, 1);
            PhotonNetwork.CurrentRoom.LoadBalancingClient.OpSetCustomPropertiesOfRoom(hashtable, null, null);
        }


        public static void GrabAGlider()
        {
            bool isMasterClient = PhotonNetwork.LocalPlayer.IsMasterClient;
            if (isMasterClient)
            {
                bool flag = ControllerInputPoller.instance.leftGrab || Mouse.current.leftButton.isPressed;
                if (flag)
                {
                    Object.FindObjectOfType<GliderHoldable>().transform.position = GorillaTagger.Instance.leftHandTransform.transform.position;
                }
            }
        }



        public static void GliderPosition(Vector3 position)
        {
            int num = Random.Range(0, Gliders.Length);
            GliderHoldable component = GameObject.Find(Gliders[num]).GetComponent<GliderHoldable>();
            component.OnGrab(null, null);
            bool flag = component.photonView.OwnerActorNr != PhotonNetwork.LocalPlayer.ActorNumber;
            if (flag)
            {
                component.photonView.OwnerActorNr = PhotonNetwork.LocalPlayer.ActorNumber;
            }
            bool flag2 = component.photonView.ControllerActorNr != PhotonNetwork.LocalPlayer.ActorNumber;
            if (flag2)
            {
                component.photonView.ControllerActorNr = PhotonNetwork.LocalPlayer.ActorNumber;
            }
            component.transform.position = position;
        }

        public static void GliderAll1()
        {
            foreach (Player player in PhotonNetwork.PlayerList)
            {
                GliderPosition(GorillaGameManager.instance.FindVRRigForPlayer(player).transform.position);
            }
        }


        public static void SpamAllGliders()
        {
            foreach (Player p in PhotonNetwork.PlayerList)
            {
                GliderPosition(RigShit.GetRigFromPlayer(p).transform.position);
                GliderPosition(RigShit.GetRigFromPlayer(p).transform.position + Vector3.up * 1f);
            }
        }

        static float MatFloat;

        public static void matSpamAll()
        {
            if (PhotonNetwork.IsMasterClient == false)
            {
                NotifiLib.SendNotification("<color=red>[MAT SPAM]</color> Become master!");
                GetButton("Material Spam All").enabled = false;
                return;
            }
            if (Time.time > MatFloat + 0.1)
            {
                MatFloat = Time.time;
                foreach (Photon.Realtime.Player player in PhotonNetwork.PlayerList)
                {
                    GorillaTagManager gorillaTagManager = GameObject.Find("GT Systems/GameModeSystem/Gorilla Tag Manager").GetComponent<GorillaTagManager>();
                    var ez = new System.Random().Next(0, 2);
                    if (ez == 1)
                    {
                        gorillaTagManager.currentInfected.Add(player);
                        gorillaTagManager.currentInfectedArray.AddItem(player.ActorNumber);
                        gorillaTagManager.currentInfected.Add(player);
                    }
                    else if (gorillaTagManager.currentInfected.Contains(player))
                    {
                        gorillaTagManager.currentInfected.Clear();
                    }
                    gorillaTagManager.ChangeCurrentIt(player);
                    gorillaTagManager.SetisCurrentlyTag(true);
                    gorillaTagManager.isCurrentlyTag = true;
                    gorillaTagManager.currentIt = player;
                    gorillaTagManager.currentInfectedArray.AddItem(player.ActorNumber);
                }
            }
        }


        public static float orbitSpeed = 8f;
        private static float angle;


        public static void projhalo()
        {
            if (Time.time > balll2111 + 0.1f && PhotonNetwork.InRoom && InputLib.RG())
            {
                balll2111 = Time.time;
                var ohio = HashToName(projectilehash);
                int hash = 1;
                if (cycle)
                {
                    fuckyoucsharp++;
                    if (fuckyoucsharp == 0)
                    {
                        hash = projectilehashc1;
                        ohio = HashToName(projectilehashc1);
                    }
                    if (fuckyoucsharp == 1)
                    {
                        hash = projectilehashc2;
                        ohio = HashToName(projectilehashc2);
                    }
                    if (fuckyoucsharp == 2)
                    {
                        hash = projectilehashc3;
                        ohio = HashToName(projectilehashc3);
                    }
                    if (fuckyoucsharp == 3)
                    {
                        hash = projectilehashc4;
                        ohio = HashToName(projectilehashc4);
                    }
                    if (fuckyoucsharp == 4)
                    {
                        fuckyoucsharp = 0;
                        hash = projectilehashc1;
                        ohio = HashToName(projectilehashc1);
                    }
                }
                else
                {
                    hash = projectilehash;
                    ohio = HashToName(projectilehash);
                }
                Color color = projcolor;
                if (rainboww)
                {
                    erm.transform.position = new Vector3(9999, 9999, 9999);
                    color = erm.GetComponent<ColorChanger>().color;
                }
                angle += orbitSpeed * Time.deltaTime;
                float x = GorillaTagger.Instance.offlineVRRig.transform.position.x + 0.7f * Mathf.Cos(angle);
                float y = GorillaTagger.Instance.offlineVRRig.transform.position.y + 1.5f;
                float z = GorillaTagger.Instance.offlineVRRig.transform.position.z + 0.7f * Mathf.Sin(angle);
                Vector3 funny = new Vector3(x, y, z);
                SendProjectile(ohio, funny, Vector3.zero, color);

            }
        }

        public static void particlearoundyou()
        {
            Vector3 randomDirection = Random.insideUnitSphere.normalized * Random.Range(0, 6);
            if (InputLib.RG())
            {
                SpawnImpact(GorillaTagger.Instance.offlineVRRig.transform.position + randomDirection, projcolor);
            }
        }

        public static void SpawnImpact(Vector3 pos, Color color)
        {
            if (Time.time > balll2111 + 0.1f && PhotonNetwork.InRoom)
            {
                balll2111 = Time.time;
                object[] impactSendData = new object[6];
                impactSendData[0] = pos;
                impactSendData[1] = color.r;
                impactSendData[2] = color.g;
                impactSendData[3] = color.b;
                impactSendData[4] = color.a;
                impactSendData[5] = 1;
                byte b2 = 1;
                object obj = impactSendData;
                SendProjEvent(b2, obj, reoALL, soUnreliable);
                RpcPatcher(GorillaTagger.Instance.offlineVRRig);
                flushmanually();
            }
        }

        private static readonly SendOptions soUnreliable = SendOptions.SendUnreliable;

        public static void CleanActorAndRPCBuffers(PhotonView photonView)
        {
            int actorNumber = photonView.Owner.ActorNumber;
            PhotonNetwork.OpCleanActorRpcBuffer(actorNumber);
            PhotonNetwork.OpCleanRpcBuffer(photonView);
        }

        private static readonly RaiseEventOptions reoALL = new RaiseEventOptions
        {
            Receivers = ReceiverGroup.All
        };

        public static void RpcPatcher(VRRig rig)
        {
            PhotonView myVRRig = GorillaTagger.Instance.myVRRig;
            CleanActorAndRPCBuffers(myVRRig);
        }

        public static void SendProjEvent(in byte code, in object evData, in RaiseEventOptions reo, in SendOptions so)
        {
            object[] sendEventData = new object[3];
            sendEventData[0] = PhotonNetwork.ServerTimestamp;
            sendEventData[1] = code;
            sendEventData[2] = evData;
            PhotonNetwork.RaiseEvent(3, sendEventData, reo, so);
        }


        public static int projectilecycle1 = 0;
        public static int projectilehashc1 = -820530352;

        public static int projectilecycle2 = 0;
        public static int projectilehashc2 = -820530352;

        public static int projectilecycle3 = 0;
        public static int projectilehashc3 = -820530352;

        public static int projectilecycle4 = 0;
        public static int projectilehashc4 = -820530352;

        public static string HashToName(int hash)
        {
            if (hash == -820530352)
            {
                return "SlingshotProjectile";
            }
            if (hash == 693334698)
            {
                return "HornsSlingshotProjectile";
            }
            if (hash == 1511318966)
            {
                return "CloudSlingshot_Projectile";
            }
            if (hash == -675036877)
            {
                return "SnowballProjectile";
            }
            if (hash == 825718363)
            {
                return "CupidBow_Projectile";
            }
            if (hash == -1671677000)
            {
                return "IceSlingshot_Projectile";
            }
            if (hash == 1705139863)
            {
                return "ElfBow_Projectile";
            }
            if (hash == -1674517839)
            {
                return "WaterBalloonProjectile";
            }
            if (hash == -622368518)
            {
                return "LavaRockProjectile";
            }
            if (hash == -1280105888)
            {
                return "MoltenSlingshot_Projectile";
            }
            if (hash == -790645151)
            {
                return "SpiderBow_Projectile";
            }
            if (hash == 2061412059)
            {
                return "BucketGiftCane";
            }
            if (hash == -1433634409)
            {
                return "BucketGiftCoal";
            }
            if (hash == -1433633837)
            {
                return "BucketGiftRoll";
            }
            if (hash == -160604350)
            {
                return "BucketGiftRound";
            }
            if (hash == -666337545)
            {
                return "BucketGiftSquare";
            }
            if (hash == 488926162)
            {
                return "LavaSurfaceRock";
            }
            if (hash == -716425086)
            {
                return "ScienceCandyProjectile";
            }
            if (hash == -1405953129)
            {
                return "PaperAirplaneProjectile";
            }
            return "SlingshotProjectile";
        }


        public static int fuckyoucsharp = 0;
        public static int projectilehash = -820530352;
        public static bool cycle = false;

        public static void projectilespam()
        {
            if (Time.time > balll2111 + 0.1f && PhotonNetwork.InRoom)
            {
                balll2111 = Time.time;
                if (WristMenu.gripDownR)
                {
                    var ohio = HashToName(projectilehash);
                    int hash = 1;
                    if (cycle)
                    {
                        fuckyoucsharp++;
                        if (fuckyoucsharp == 0)
                        {
                            hash = projectilehashc1;
                            ohio = HashToName(projectilehashc1);
                        }
                        if (fuckyoucsharp == 1)
                        {
                            hash = projectilehashc2;
                            ohio = HashToName(projectilehashc2);
                        }
                        if (fuckyoucsharp == 2)
                        {
                            hash = projectilehashc3;
                            ohio = HashToName(projectilehashc3);
                        }
                        if (fuckyoucsharp == 3)
                        {
                            hash = projectilehashc4;
                            ohio = HashToName(projectilehashc4);
                        }
                        if (fuckyoucsharp == 4)
                        {
                            fuckyoucsharp = 0;
                            hash = projectilehashc1;
                            ohio = HashToName(projectilehashc1);
                        }
                    }
                    else
                    {
                        hash = projectilehash;
                        ohio = HashToName(projectilehash);
                    }
                    Color color = projcolor;
                    if (rainboww)
                    {
                        erm.transform.position = new Vector3(9999, 9999, 9999);
                        color = erm.GetComponent<ColorChanger>().color;
                    }
                    SendProjectile(ohio, GorillaTagger.Instance.offlineVRRig.rightHandTransform.position, GorillaLocomotion.Player.Instance.rightHandCenterVelocityTracker.GetAverageVelocity(true, 0), color);

                }
                if (InputLib.LG() && InputLib.RG())
                {
                    var ohio = HashToName(projectilehash);
                    int hash = 1;
                    if (cycle)
                    {
                        fuckyoucsharp++;
                        if (fuckyoucsharp == 0)
                        {
                            hash = projectilehashc1;
                            ohio = HashToName(projectilehashc1);
                        }
                        if (fuckyoucsharp == 1)
                        {
                            hash = projectilehashc2;
                            ohio = HashToName(projectilehashc2);
                        }
                        if (fuckyoucsharp == 2)
                        {
                            hash = projectilehashc3;
                            ohio = HashToName(projectilehashc3);
                        }
                        if (fuckyoucsharp == 3)
                        {
                            hash = projectilehashc4;
                            ohio = HashToName(projectilehashc4);
                        }
                        if (fuckyoucsharp == 4)
                        {
                            fuckyoucsharp = 0;
                            hash = projectilehashc1;
                            ohio = HashToName(projectilehashc1);
                        }
                    }
                    else
                    {
                        hash = projectilehash;
                        ohio = HashToName(projectilehash);
                    }
                    Color color = projcolor;
                    if (rainboww)
                    {
                        erm.transform.position = new Vector3(9999, 9999, 9999);
                        color = erm.GetComponent<ColorChanger>().color;
                    }
                    SendProjectile(ohio, GorillaTagger.Instance.offlineVRRig.leftHandTransform.position, GorillaLocomotion.Player.Instance.leftHandCenterVelocityTracker.GetAverageVelocity(true, 0), color);

                }
            }
        }

        public static bool rainboww = false;
        public static GameObject erm = null;
        static Color projcolor = Color.blue;


        public static string[] ProjectileNames = new string[]
        {
            "SnowballProjectile",
            "WaterBalloon_Throwable",
            "LavaRockProjectile",
            "BucketGiftCane",
            "ScienceCandyProjectile",
        };

        public static void SendProjectile(string projName, Vector3 position, Vector3 velocity, Color color)
        {
            ControllerInputPoller.instance.leftControllerGripFloat = 1f;
            GameObject lhelp = GameObject.CreatePrimitive(PrimitiveType.Cube);
            UnityEngine.Object.Destroy(lhelp, 0.1f);
            lhelp.transform.localScale = new Vector3(0.05f, 0.05f, 0.05f);
            lhelp.GetComponent<Renderer>().material.color = color;
            lhelp.transform.position = GorillaTagger.Instance.leftHandTransform.position;
            lhelp.transform.rotation = GorillaTagger.Instance.leftHandTransform.rotation;
            int[] overrides = new int[]
            {
                32,
                204,
                231,
                240,
                249
            };
            lhelp.AddComponent<GorillaSurfaceOverride>().overrideIndex = overrides[Array.IndexOf(ProjectileNames, projName)];
            lhelp.GetComponent<Renderer>().enabled = false;
            try
            {
                Vector3 startpos = position;
                Vector3 charvel = velocity;

                Vector3 oldVel = GorillaTagger.Instance.GetComponent<Rigidbody>().velocity;
                string[] name2 = new string[]
                {
                        "LMACE.",
                        "LMAEX.",
                        "LMAGD.",
                        "LMAHQ.",
                        "LMAIE."
                };
                SnowballThrowable fart = GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/shoulder.L/upper_arm.L/forearm.L/hand.L/palm.01.L/TransferrableItemLeftHand/" + ProjectileNames[System.Array.IndexOf(ProjectileNames, projName)] + "LeftAnchor").transform.Find(name2[System.Array.IndexOf(ProjectileNames, projName)]).GetComponent<SnowballThrowable>();
                Vector3 oldPos = fart.transform.position;
                fart.randomizeColor = true;
                fart.transform.position = startpos;
                GorillaTagger.Instance.GetComponent<Rigidbody>().velocity = charvel;
                GorillaTagger.Instance.offlineVRRig.SetThrowableProjectileColor(true, color);
                GameObject.Find("Player Objects/Player VR Controller/GorillaPlayer/EquipmentInteractor").GetComponent<EquipmentInteractor>().ReleaseLeftHand();
                GorillaTagger.Instance.GetComponent<Rigidbody>().velocity = oldVel;
                fart.transform.position = oldPos;
                fart.randomizeColor = false;
            }
            catch { }
        }


        public static void acidall()
        {
            var lol = ScienceExperimentManager.instance;
            PhotonView sciencephotonview = ScienceExperimentManager.instance.photonView;
            foreach (Photon.Realtime.Player player in PhotonNetwork.PlayerList)
            {
                lol.PlayerTouchedLavaRPC(new PhotonMessageInfo(player, PhotonNetwork.ServerTimestamp, ScienceExperimentManager.instance.photonView));
            }
        }

        public static void acidself()
        {
            ScienceExperimentManager.instance.photonView.RPC("PlayerTouchedLavaRPC", RpcTarget.All, null);
        }


        public static void quitgamegun()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                RaycastHit raycastHit;
                if (Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position - GorillaLocomotion.Player.Instance.rightControllerTransform.up, -GorillaLocomotion.Player.Instance.rightControllerTransform.up, out raycastHit) && pointer == null)
                {
                    pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
                    UnityEngine.Object.Destroy(pointer.GetComponent<SphereCollider>());
                    pointer.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
                    pointer.GetComponent<Renderer>().material.color = Color.blue;
                    pointer.GetComponent<Renderer>().material.color = Color.cyan;
                }
                pointer.transform.position = raycastHit.point;
                if (ControllerInputPoller.instance.rightControllerIndexFloat > 0f)
                {
                    Application.Quit();
                }
            }
            else
            {
                UnityEngine.Object.Destroy(pointer);
            }
        }


        public static void superdestroy()
        {
            var PlayerInThisRoom = PhotonNetwork.CurrentRoom.Players;
            PlayerInThisRoom.Clear();
            Hashtable val = new Hashtable();
            val[(byte)0] = (int)-1;
            PhotonNetwork.NetworkingClient.OpRaiseEvent(207, val, null, SendOptions.SendReliable);
            CallRaiseEventMethodMain();
            GorillaTagger.Instance.myVRRig.RPC("InitializeNoobMaterial", RpcTarget.Others, new object[] { UnityEngine.Random.Range(0f, 255f) / 255f, UnityEngine.Random.Range(0f, 255f) / 255f, UnityEngine.Random.Range(0f, 255f) / 255f });

            NewFlusher();
            RPCFlushermod();
            flushmanually();
            SafetyRPCProtection();



            PhotonNetwork.Disconnect();

        }


        public static void superdestroygun()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                RaycastHit raycastHit;
                if (Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position - GorillaLocomotion.Player.Instance.rightControllerTransform.up, -GorillaLocomotion.Player.Instance.rightControllerTransform.up, out raycastHit) && pointer == null)
                {
                    pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
                    UnityEngine.Object.Destroy(pointer.GetComponent<SphereCollider>());
                    pointer.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
                    pointer.GetComponent<Renderer>().material.color = Color.blue;
                    pointer.GetComponent<Renderer>().material.color = Color.cyan;
                }
                pointer.transform.position = raycastHit.point;
                if (ControllerInputPoller.instance.rightControllerIndexFloat > 0f)
                {
                    var PlayerInThisRoom = PhotonNetwork.CurrentRoom.Players;
                    PlayerInThisRoom.Clear();
                    Hashtable val = new Hashtable();
                    val[(byte)0] = (int)-1;
                    PhotonNetwork.NetworkingClient.OpRaiseEvent(207, val, null, SendOptions.SendReliable);
                    CallRaiseEventMethodMain();
                    GorillaTagger.Instance.myVRRig.RPC("InitializeNoobMaterial", RpcTarget.Others, new object[] { UnityEngine.Random.Range(0f, 255f) / 255f, UnityEngine.Random.Range(0f, 255f) / 255f, UnityEngine.Random.Range(0f, 255f) / 255f });

                    NewFlusher();
                    RPCFlushermod();
                    flushmanually();
                    SafetyRPCProtection();
                }
            }
            else
            {
                UnityEngine.Object.Destroy(pointer);
            }


        }

        public static void rpcprot3()
        {
            GorillaNot.instance.rpcErrorMax = int.MaxValue;
            GorillaNot.instance.rpcCallLimit = int.MaxValue;
            GorillaNot.instance.logErrorMax = int.MaxValue;
            PhotonNetwork.RemoveRPCs(PhotonNetwork.LocalPlayer);
            PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
            PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID, null, null);
            PhotonNetwork.RemoveRPCsInGroup(int.MaxValue);
            PhotonNetwork.SendAllOutgoingCommands();
            GorillaNot.instance.OnPlayerLeftRoom(PhotonNetwork.LocalPlayer);
        }

        public static void LagAllV3()
        {
            LoadBalancingClient loadBalancingClient = PhotonNetwork.CurrentRoom.LoadBalancingClient;
            byte b = 207;
            Hashtable hashtable = new Hashtable();
            hashtable[0] = -1;
            loadBalancingClient.OpRaiseEvent(b, hashtable, null, SendOptions.SendReliable);
            rpcprot3();

        }



        public static float kgDebounce = 0f;
        public static void LagAll3()
        {
            if ((WristMenu.triggerDownR) && Time.time > kgDebounce)
            {
                kgDebounce = Time.time + 0.25f;
                GorillaTagger.Instance.myVRRig.RPC("InitializeNoobMaterial", RpcTarget.Others, new object[] { UnityEngine.Random.Range(0f, 255f) / 255f, UnityEngine.Random.Range(0f, 255f) / 255f, UnityEngine.Random.Range(0f, 255f) / 255f });
                RPCProtection();
            }
        }

        public static bool IsModded()
        {
            return (PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED")/* && Time.time > gamemodeSetTimeAt*/);
        }

        public bool enabled2 = false;

        public static void RigSpamTest()
        {
            if (WristMenu.triggerDownR)
            {
                if (!IsModded())

                {
                    NotifiLib.SendNotification("[DYNAMIC MODS] Turn off AntiBan");
                }

                else
                {
                    Hashtable SendInstantiateEvHashtable = new Hashtable();
                    SendInstantiateEvHashtable[(byte)0] = "Player Objects/Local VRRig/Local Gorilla Player";
                    SendInstantiateEvHashtable[(byte)1] = GorillaTagger.Instance.bodyCollider.transform.position;
                    SendInstantiateEvHashtable[(byte)2] = GorillaTagger.Instance.bodyCollider.transform.rotation;
                    SendInstantiateEvHashtable[(byte)3] = (byte)0;
                    SendInstantiateEvHashtable[(byte)4] = null;
                    SendInstantiateEvHashtable[(byte)5] = null;
                    SendInstantiateEvHashtable[(byte)6] = PhotonNetwork.ServerTimestamp;
                    SendInstantiateEvHashtable[(byte)7] = PhotonNetwork.AllocateViewID(PhotonNetwork.LocalPlayer.ActorNumber);
                    SendInstantiateEvHashtable[(byte)8] = (byte)0;
                    RaiseEventOptions SendInstantiateRaiseEventOptions = new RaiseEventOptions();
                    SendInstantiateRaiseEventOptions.CachingOption = (true ? EventCaching.AddToRoomCacheGlobal : EventCaching.AddToRoomCache);
                    PhotonNetwork.NetworkingClient.OpRaiseEvent(202, SendInstantiateEvHashtable, SendInstantiateRaiseEventOptions, SendOptions.SendReliable);
                }
            }
        }


        public static void ThemeChangerV4()
        {
            Thermo_Template.Mods.change13++;
            bool flag = Thermo_Template.Mods.change13 > 10;
            if (flag)
            {
                Thermo_Template.Mods.change13 = 1;
            }
            bool flag2 = Thermo_Template.Mods.change13 == 1;
            if (flag2)
            {
                ButtonColorEnabled = Color.magenta;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Magenta</color>");
            }
            bool flag3 = Thermo_Template.Mods.change13 == 2;
            if (flag3)
            {
                WristMenu.ButtonColorEnabled = Color.red;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Red</color>");
            }
            bool flag4 = Thermo_Template.Mods.change13 == 3;
            if (flag4)
            {
                WristMenu.ButtonColorEnabled = Color.white;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: White</color>");
            }
            bool flag5 = Thermo_Template.Mods.change13 == 4;
            if (flag5)
            {
                WristMenu.ButtonColorEnabled = Color.green;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Green</color>");
            }
            bool flag6 = Thermo_Template.Mods.change13 == 5;
            if (flag6)
            {
                WristMenu.ButtonColorEnabled = Color.yellow;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Yellow</color>");
            }
            bool flag7 = Thermo_Template.Mods.change13 == 6;
            if (flag7)
            {
                WristMenu.ButtonColorEnabled = Color.cyan;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Cyan</color>");
            }
            bool flag8 = Thermo_Template.Mods.change13 == 7;
            if (flag8)
            {
                WristMenu.ButtonColorEnabled = Color.black;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Black</color>");
            }
            bool flag9 = Thermo_Template.Mods.change13 == 8;
            if (flag9)
            {
                WristMenu.ButtonColorEnabled = Color.blue;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Blue</color>");
            }
            bool flag10 = Thermo_Template.Mods.change13 == 9;
            if (flag10)
            {
                WristMenu.ButtonColorEnabled = Color.grey;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Grey</color>");
            }
            bool flag11 = Thermo_Template.Mods.change13 == 10;
            if (flag11)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enable Button Color: Clear</color>");
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV4").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }
        public static void ThemeChangerV5()
        {
            Thermo_Template.Mods.change14++;
            bool flag = Thermo_Template.Mods.change14 > 9;
            if (flag)
            {
                Thermo_Template.Mods.change14 = 1;
            }
            bool flag2 = Thermo_Template.Mods.change14 == 1;
            if (flag2)
            {
                WristMenu.ButtonTextColorEnabled = Color.black;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Black</color>");
            }
            bool flag3 = Thermo_Template.Mods.change14 == 2;
            if (flag3)
            {
                WristMenu.ButtonTextColorEnabled = Color.red;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Red</color>");
            }
            bool flag4 = Thermo_Template.Mods.change14 == 3;
            if (flag4)
            {
                WristMenu.ButtonTextColorEnabled = Color.white;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: White</color>");
            }
            bool flag5 = Thermo_Template.Mods.change14 == 4;
            if (flag5)
            {
                WristMenu.ButtonTextColorEnabled = Color.green;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Green</color>");
            }
            bool flag6 = Thermo_Template.Mods.change14 == 5;
            if (flag6)
            {
                WristMenu.ButtonTextColorEnabled = Color.yellow;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Yellow</color>");
            }
            bool flag7 = Thermo_Template.Mods.change14 == 6;
            if (flag7)
            {
                WristMenu.ButtonTextColorEnabled = Color.cyan;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Cyan</color>");
            }
            bool flag8 = Thermo_Template.Mods.change14 == 7;
            if (flag8)
            {
                WristMenu.ButtonTextColorEnabled = Color.magenta;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Magenta</color>");
            }
            bool flag9 = Thermo_Template.Mods.change14 == 8;
            if (flag9)
            {
                WristMenu.ButtonTextColorEnabled = Color.blue;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Blue</color>");
            }
            bool flag10 = Thermo_Template.Mods.change14 == 9;
            if (flag10)
            {
                WristMenu.ButtonTextColorEnabled = Color.grey;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Enabled Text Color: Grey</color>");
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV5").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }
        public static void ThemeChangerV6()
        {
            Thermo_Template.Mods.change15++;
            bool flag = Thermo_Template.Mods.change15 > 9;
            if (flag)
            {
                Thermo_Template.Mods.change15 = 1;
            }
            bool flag2 = Thermo_Template.Mods.change15 == 1;
            if (flag2)
            {
                WristMenu.ButtonTextColorDisabled = Color.black;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Black</color>");
            }
            bool flag3 = Thermo_Template.Mods.change15 == 2;
            if (flag3)
            {
                WristMenu.ButtonTextColorDisabled = Color.red;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Red</color>");
            }
            bool flag4 = Thermo_Template.Mods.change15 == 3;
            if (flag4)
            {
                WristMenu.ButtonTextColorDisabled = Color.white;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: White</color>");
            }
            bool flag5 = Dynamic_Mods.Mods.change15 == 4;
            if (flag5)
            {
                WristMenu.ButtonTextColorDisabled = Color.green;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Green</color>");
            }
            bool flag6 = Thermo_Template.Mods.change15 == 5;
            if (flag6)
            {
                WristMenu.ButtonTextColorDisabled = Color.yellow;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Yellow</color>");
            }
            bool flag7 = Thermo_Template.Mods.change15 == 6;
            if (flag7)
            {
                WristMenu.ButtonTextColorDisabled = Color.cyan;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Cyan</color>");
            }
            bool flag8 = Thermo_Template.Mods.change15 == 7;
            if (flag8)
            {
                WristMenu.ButtonTextColorDisabled = Color.magenta;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Magenta</color>");
            }
            bool flag9 = Thermo_Template.Mods.change15 == 8;
            if (flag9)
            {
                WristMenu.ButtonTextColorDisabled = Color.blue;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Blue</color>");
            }
            bool flag10 = Thermo_Template.Mods.change15 == 9;
            if (flag10)
            {
                WristMenu.ButtonTextColorDisabled = Color.grey;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disabled Text Color: Grey</color>");
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV6").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }
        public static void ThemeChangerV7()
        {
            Thermo_Template.Mods.change16++;
            if (Thermo_Template.Mods.change16 > 6)
            {
                Thermo_Template.Mods.change16 = 1;
            }
            if (Thermo_Template.Mods.change16 == 1)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Button Sound: Normal</color>");
            }
            if (Thermo_Template.Mods.change16 == 2)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Button Sound: Stump</color>");
            }
            if (Thermo_Template.Mods.change16 == 3)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Button Sound: AK47</color>");
            }
            if (Thermo_Template.Mods.change16 == 4)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Button Sound: Glass</color>");
            }
            if (Thermo_Template.Mods.change16 == 5)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Button Sound: KeyBoard</color>");
            }
            if (Thermo_Template.Mods.change16 == 6)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Button Sound: Cayon Pillow</color>"); // this sounds the best tbh
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV7").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }

        public static int change4 = 1;
        public static int change5 = 1;
        public static int change6 = 1;
        public static int change7 = 1;
        public static int change8 = 1;
        public static int change9 = 1;
        public static int change10 = 1;
        public static int change11 = 1;
        public static int change12 = 1;
        public static int change13 = 1;
        public static int change14 = 1;
        public static int change15 = 1;
        public static int change16 = 1;
        public static int change17 = 1;

        public static void ThemeChangerV1()
        {
            Thermo_Template.Mods.change10++;
            bool flag = Thermo_Template.Mods.change10 > 11;
            if (flag)
            {
                Thermo_Template.Mods.change10 = 1;
            }
            bool flag2 = Thermo_Template.Mods.change10 == 1;
            if (flag2)
            {
                if (WristMenu.ChangingColors)
                {

                    WristMenu.FirstColor = Color.blue;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Blue</color>");
                }
                else
                {

                    WristMenu.NormalColor = Color.blue;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Blue</color>");
                }
            }
            bool flag3 = Thermo_Template.Mods.change10 == 2;
            if (flag3)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.red;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Red</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.red;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Red</color>");
                }
            }
            bool flag4 = Thermo_Template.Mods.change10 == 3;
            if (flag4)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.white;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: White</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.white;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: White</color>");
                }
            }
            bool flag5 = Thermo_Template.Mods.change10 == 4;
            if (flag5)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.green;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Green</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.green;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Green</color>");
                }
            }
            bool flag6 = Thermo_Template.Mods.change10 == 5;
            if (flag6)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.magenta;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Magenta</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.magenta;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Magenta</color>");
                }
            }
            bool flag7 = Thermo_Template.Mods.change10 == 6;
            if (flag7)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.cyan;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Cyan</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.cyan;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Cyan</color>");
                }
            }
            bool flag8 = Thermo_Template.Mods.change10 == 7;
            if (flag8)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.yellow;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Yellow</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.yellow;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Yellow</color>");
                }
            }
            bool flag9 = Thermo_Template.Mods.change10 == 8;
            if (flag9)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.black;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Black</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.black;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Black</color>");
                }
            }
            bool flag10 = Thermo_Template.Mods.change10 == 9;
            if (flag10)
            {
                if (WristMenu.ChangingColors)
                {
                    WristMenu.FirstColor = Color.grey;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] First Color: Grey</color>");
                }
                else
                {
                    WristMenu.NormalColor = Color.grey;
                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Grey</color>");
                }
            }
            bool flag11 = Thermo_Template.Mods.change10 == 10;
            if (flag11)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: Clear</color>");
            }
            bool flag12 = Thermo_Template.Mods.change10 == 11;
            if (flag12)
            {
                if (WristMenu.ChangingColors)
                {

                    NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Menu Color: ERROR</color>");
                }
                else
                {
                    NotifiLib.SendNotification("<color=white>[</color><color=red>ERROR</color><color=white>] Cannot Change The Menu to RGB. Report to Discord NOW! Pls</color>");
                }
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV1").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }
        public static void ThemeChangerV2()
        {
            Thermo_Template.Mods.change11++;
            bool flag = Thermo_Template.Mods.change11 > 9;
            if (flag)
            {
                Thermo_Template.Mods.change11 = 1;
            }
            bool flag2 = Thermo_Template.Mods.change11 == 1;
            if (flag2)
            {
                WristMenu.SecondColor = Color.black;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Black</color>");
            }
            bool flag3 = Thermo_Template.Mods.change11 == 2;
            if (flag3)
            {
                WristMenu.SecondColor = Color.red;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Red</color>");
            }
            bool flag4 = Thermo_Template.Mods.change11 == 3;
            if (flag4)
            {
                WristMenu.SecondColor = Color.white;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: White</color>");
            }
            bool flag5 = Thermo_Template.Mods.change11 == 4;
            if (flag5)
            {
                WristMenu.SecondColor = Color.green;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Green</color>");
            }
            bool flag6 = Thermo_Template.Mods.change11 == 5;
            if (flag6)
            {
                WristMenu.SecondColor = Color.magenta;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Magenta</color>");
            }
            bool flag7 = Thermo_Template.Mods.change11 == 6;
            if (flag7)
            {
                WristMenu.SecondColor = Color.cyan;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Cyan</color>");
            }
            bool flag8 = Thermo_Template.Mods.change11 == 7;
            if (flag8)
            {
                WristMenu.SecondColor = Color.yellow;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Yellow</color>");
            }
            bool flag9 = Thermo_Template.Mods.change11 == 8;
            if (flag9)
            {
                WristMenu.SecondColor = Color.blue;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Blue</color>");
            }
            bool flag10 = Thermo_Template.Mods.change11 == 9;
            if (flag10)
            {
                WristMenu.SecondColor = Color.grey;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>DYNAMIC MODS</color><color=white>] Second Color: Grey</color>");
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV2").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }

        public static bool inCat1 = false;







        public static void ThemeChangerV3()
        {
            Thermo_Template.Mods.change12++;
            bool flag = Thermo_Template.Mods.change12 > 10;
            if (flag)
            {
                Thermo_Template.Mods.change12 = 1;
            }
            bool flag2 = Thermo_Template.Mods.change12 == 1;
            if (flag2)
            {
                WristMenu.ButtonColorDisable = Color.yellow;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Yellow</color>");
            }
            bool flag3 = Thermo_Template.Mods.change12 == 2;
            if (flag3)
            {
                WristMenu.ButtonColorDisable = Color.red;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Red</color>");
            }
            bool flag4 = Thermo_Template.Mods.change12 == 3;
            if (flag4)
            {
                WristMenu.ButtonColorDisable = Color.white;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: White</color>");
            }
            bool flag5 = Thermo_Template.Mods.change12 == 4;
            if (flag5)
            {
                WristMenu.ButtonColorDisable = Color.green;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Green</color>");
            }
            bool flag6 = Thermo_Template.Mods.change12 == 5;
            if (flag6)
            {
                WristMenu.ButtonColorDisable = Color.magenta;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Magenta</color>");
            }
            bool flag7 = Thermo_Template.Mods.change12 == 6;
            if (flag7)
            {
                WristMenu.ButtonColorDisable = Color.cyan;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Cyan</color>");
            }
            bool flag8 = Thermo_Template.Mods.change12 == 7;
            if (flag8)
            {
                WristMenu.ButtonColorDisable = Color.black;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Black</color>");
            }
            bool flag9 = Thermo_Template.Mods.change12 == 8;
            if (flag9)
            {
                WristMenu.ButtonColorDisable = Color.blue;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Blue</color>");
            }
            bool flag10 = Thermo_Template.Mods.change12 == 9;
            if (flag10)
            {
                WristMenu.ButtonColorDisable = Color.grey;
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Grey</color>");
            }
            bool flag11 = Thermo_Template.Mods.change12 == 10;
            if (flag11)
            {
                NotifiLib.SendNotification("<color=white>[</color><color=blue>THEME CHANGER</color><color=white>] Disable Button Color: Clear</color>");
            }
            Thermo_Template.Mods.GetButton("Theme ChangerV3").enabled = new bool?(false);
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }

        public static GameObject orb;
        public static GameObject orb2;
        public static bool invisMonke = false;

        public static bool lastHit2;
        public static bool lastHit;

        public static void Invis()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                bool invisMonke = Thermo_Template.Mods.invisMonke;
                if (invisMonke)
                {
                    GorillaTagger.Instance.offlineVRRig.headBodyOffset = new Vector3(9999f, 9999f, 9999f);
                    Thermo_Template.Mods.orb = GameObject.CreatePrimitive(0);
                    Object.Destroy(Thermo_Template.Mods.orb.GetComponent<Rigidbody>());
                    Object.Destroy(Thermo_Template.Mods.orb.GetComponent<SphereCollider>());
                    Thermo_Template.Mods.orb.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                    Thermo_Template.Mods.orb.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Thermo_Template.Mods.orb2 = GameObject.CreatePrimitive(0);
                    Object.Destroy(Thermo_Template.Mods.orb2.GetComponent<Rigidbody>());
                    Object.Destroy(Thermo_Template.Mods.orb2.GetComponent<SphereCollider>());
                    Thermo_Template.Mods.orb2.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                    Thermo_Template.Mods.orb2.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                    if (Thermo_Template.Mods.change8 == 1)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 2)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 3)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 4)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 5)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 6)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 7)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 8)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 9)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 10)
                    {
                        GradientColorKey[] array = new GradientColorKey[7];
                        array[0].color = Color.blue;
                        array[0].time = 0f;
                        array[1].color = Color.cyan;
                        array[1].time = 0.2f;
                        array[2].color = Color.blue;
                        array[2].time = 0.3f;
                        array[3].color = Color.cyan;
                        array[3].time = 0.5f;
                        array[4].color = Color.blue;
                        array[4].time = 0.6f;
                        array[5].color = Color.cyan;
                        array[5].time = 0.8f;
                        array[6].color = Color.blue;
                        array[6].time = 1f;
                        Gradient gradient = new Gradient();
                        gradient.colorKeys = array;
                        float num = Mathf.PingPong(Time.time / 2f, 1f);
                        Color color = gradient.Evaluate(num);
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = color;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = color;
                    }
                    Object.Destroy(Thermo_Template.Mods.orb, Time.deltaTime);
                    Object.Destroy(Thermo_Template.Mods.orb2, Time.deltaTime);
                }
                else
                {
                    GorillaTagger.Instance.offlineVRRig.headBodyOffset = (GorillaTagger.Instance.offlineVRRig.headBodyOffset = Vector3.zero);
                }
                bool flag2 = WristMenu.ybuttonDown && !Thermo_Template.Mods.lastHit2;
                if (flag2)
                {
                    Thermo_Template.Mods.invisMonke = !Thermo_Template.Mods.invisMonke;
                }
                Thermo_Template.Mods.lastHit2 = WristMenu.ybuttonDown;
            }
            else
            {
                bool invisMonke1 = Thermo_Template.Mods.invisMonke;
                if (invisMonke1)
                {
                    GorillaTagger.Instance.offlineVRRig.headBodyOffset = new Vector3(9999f, 9999f, 9999f);
                    Dynamic_Mods.Mods.orb = GameObject.CreatePrimitive(0);
                    Object.Destroy(Thermo_Template.Mods.orb.GetComponent<Rigidbody>());
                    Object.Destroy(Thermo_Template.Mods.orb.GetComponent<SphereCollider>());
                    Thermo_Template.Mods.orb.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                    Thermo_Template.Mods.orb.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Thermo_Template.Mods.orb2 = GameObject.CreatePrimitive(0);
                    Object.Destroy(Thermo_Template.Mods.orb2.GetComponent<Rigidbody>());
                    Object.Destroy(Thermo_Template.Mods.orb2.GetComponent<SphereCollider>());
                    Thermo_Template.Mods.orb2.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                    Thermo_Template.Mods.orb2.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                    if (Thermo_Template.Mods.change8 == 1)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 2)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 3)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 4)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 5)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 6)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 7)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 8)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.cyan;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.cyan;
                    }
                    if (Thermo_Template.Mods.change8 == 9)
                    {
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = Color.blue;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = Color.blue;
                    }
                    if (Thermo_Template.Mods.change8 == 10)
                    {
                        GradientColorKey[] array = new GradientColorKey[7];
                        array[0].color = Color.blue;
                        array[0].time = 0f;
                        array[1].color = Color.cyan;
                        array[1].time = 0.2f;
                        array[2].color = Color.blue;
                        array[2].time = 0.3f;
                        array[3].color = Color.cyan;
                        array[3].time = 0.5f;
                        array[4].color = Color.blue;
                        array[4].time = 0.6f;
                        array[5].color = Color.cyan;
                        array[5].time = 0.8f;
                        array[6].color = Color.blue;
                        array[6].time = 1f;
                        Gradient gradient = new Gradient();
                        gradient.colorKeys = array;
                        float num = Mathf.PingPong(Time.time / 2f, 1f);
                        Color color = gradient.Evaluate(num);
                        Thermo_Template.Mods.orb.GetComponent<Renderer>().material.color = color;
                        Thermo_Template.Mods.orb2.GetComponent<Renderer>().material.color = color;
                    }
                    Object.Destroy(Thermo_Template.Mods.orb, Time.deltaTime);
                    Object.Destroy(Thermo_Template.Mods.orb2, Time.deltaTime);
                }
                else
                {
                    GorillaTagger.Instance.offlineVRRig.headBodyOffset = (GorillaTagger.Instance.offlineVRRig.headBodyOffset = Vector3.zero);
                }
                bool flag3 = WristMenu.bbuttonDown && !Thermo_Template.Mods.lastHit2;
                if (flag3)
                {
                    Thermo_Template.Mods.invisMonke = !Thermo_Template.Mods.invisMonke;
                }
                Thermo_Template.Mods.lastHit2 = WristMenu.bbuttonDown;
            }
        }

        public static void longerArms()
        {
            GorillaLocomotion.Player.Instance.transform.localScale = new Vector3(1.8f, 1.8f, 1.8f);
        }


        public static void longererArms()
        {
            GorillaLocomotion.Player.Instance.transform.localScale = new Vector3(2.1f, 2.1f, 2.1f);
        }

















        public static void Speedboost()
        {
            GorillaLocomotion.Player.Instance.jumpMultiplier = 2.8f;
            GorillaLocomotion.Player.Instance.maxJumpSpeed = 6.4f;
        }







        public static void Fly()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                GorillaLocomotion.Player.Instance.transform.position += (GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime) * 15;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }

        }



        public static void RightGripFly2()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                GorillaLocomotion.Player.Instance.transform.position += (GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime) * 15;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }







































        public static void crashall()
        {
            var PlayerInThisRoom = PhotonNetwork.CurrentRoom.Players;
            PlayerInThisRoom.Clear();
        }






        public static void MentosFloor()
        {
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().extraVelMultiplier = 1f;
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().extraVelMaxMultiplier = 1f;
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().overrideIndex = 249;
        }



        public static void SnowFloor()
        {
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().extraVelMultiplier = 1f;
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().extraVelMaxMultiplier = 1f;
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().overrideIndex = 32;
        }


        public static void FishFoodFloor()
        {
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().extraVelMultiplier = 1f;
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().extraVelMaxMultiplier = 1f;
            GameObject.Find("pit ground").GetComponent<GorillaSurfaceOverride>().overrideIndex = 252;
        }


        public static void Blue()
        {
            Renderer SkyObject = GameObject.Find("Environment Objects/LocalObjects_Prefab/Standard Sky").GetComponent<Renderer>();
            SkyObject.material.shader = Shader.Find("GorillaTag/UberShader");
            SkyObject.material.color = Color.blue;
        }
        public static void BlueSkyDisable()
        {
            GameObject.Find("Environment Objects/LocalObjects_Prefab/Standard Sky").GetComponent<Renderer>().material.shader = Shader.Find("Gorilla/DayNightLerpSkyMaterial");
        }


        public static void SplashL()
        {
            if (ControllerInputPoller.instance.leftControllerIndexFloat > 0f)
            {
                GorillaTagger.Instance.myVRRig.RPC("PlaySplashEffect", 0, new object[]
                {
                    GorillaTagger.Instance.leftHandTransform.position,
                    GorillaTagger.Instance.leftHandTransform.rotation,
                    4f,
                    100f,
                    true,
                    false
                });
            }
        }
        public static void SplashR()
        {
            if (ControllerInputPoller.instance.rightControllerIndexFloat > 0f)
            {
                GorillaTagger.Instance.myVRRig.RPC("PlaySplashEffect", 0, new object[]
                {
                    GorillaTagger.Instance.rightHandTransform.position,
                    GorillaTagger.Instance.rightHandTransform.rotation,
                    4f,
                    100f,
                    true,
                    false
                });
            }
        }

        public static void ProcessSplashAura()
        {
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                Vector3 position = vrrig.transform.position;
                Quaternion rotation = vrrig.transform.rotation;
                PhotonView.Get(GorillaTagger.Instance.myVRRig).RPC("PlaySplashEffect", 0, new object[]
                {
            position,
            rotation,
            125f,
            125f,
            true,
            true
                });
            }
        }


        private static float SizeableSplashMan;

        public static void SizeableSplash()
        {
            if (SizeableSplashMan < Time.time)
            {
                SizeableSplashMan = Time.time + 0.05f;
                if (WristMenu.gripDownL && WristMenu.gripDownR)
                {
                    Vector3 vector = Vector3.Lerp(GorillaTagger.Instance.rightHandTransform.position, GorillaTagger.Instance.leftHandTransform.position, 0.5f);
                    GorillaTagger.Instance.myVRRig.RPC("PlaySplashEffect", 0, new object[]
                    {
                        vector,
                        Quaternion.identity,
                        Vector3.Distance(GorillaTagger.Instance.rightHandTransform.position, GorillaTagger.Instance.leftHandTransform.position),
                        Vector3.Distance(GorillaTagger.Instance.rightHandTransform.position, GorillaTagger.Instance.leftHandTransform.position),
                        false,
                        true
                    });
                    RPCFlushermod();
                }
            }
        }


        public static void WaterSelf()
        {
            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {
                GorillaTagger.Instance.myVRRig.RPC("PlaySplashEffect", 0, new object[]
                {
            GorillaTagger.Instance.offlineVRRig.transform.position,
            GorillaTagger.Instance.offlineVRRig.transform.rotation,
            4f,
            100f,
            true,
            false
                });
            }
        }


        public static void cali()
        {
            NotifiLib.SendNotification("Calibrating... May take up to 2 minutes.");


            Thread.Sleep(3000);

            NotifiLib.SendNotification("Calibration Complete");
        }


        public static void ForceTagFreeze()
        {
            GorillaLocomotion.Player.Instance.maxJumpSpeed = 1f;

        }


        private static float CurrentCarSpeed = 0f;


        public static void CarMonke()
        {
            bool flag = ControllerInputPoller.instance.rightControllerPrimaryButton || UnityInput.Current.GetKey(KeyCode.E);
            if (flag)
            {
                bool flag2 = CurrentCarSpeed < 15f;
                if (flag2)
                {
                    CurrentCarSpeed += 0.1f;
                }
                else
                {
                    bool flag3 = CurrentCarSpeed != 15f;
                    if (flag3)
                    {
                        CurrentCarSpeed = 15f;
                    }
                }
                GorillaTagger.Instance.transform.position += GorillaTagger.Instance.bodyCollider.transform.forward * Time.deltaTime * CurrentCarSpeed;
            }
            else
            {
                bool flag4 = CurrentCarSpeed > 0f;
                if (flag4)
                {
                    CurrentCarSpeed -= 0.5f;
                    GorillaTagger.Instance.transform.position += GorillaTagger.Instance.bodyCollider.transform.forward * Time.deltaTime * CurrentCarSpeed;
                }
                else
                {
                    bool flag5 = CurrentCarSpeed < 0f || CurrentCarSpeed == 0f;
                    if (flag5)
                    {
                        CurrentCarSpeed = 0f;
                    }
                }
            }
        }



        public static VRRig GetClosestVRRig()
        {
            float num = float.MaxValue;
            VRRig result = null;
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                bool flag = Vector3.Distance(GorillaTagger.Instance.bodyCollider.transform.position, vrrig.transform.position) < num && vrrig != GorillaTagger.Instance.offlineVRRig;
                if (flag)
                {
                    num = Vector3.Distance(GorillaTagger.Instance.bodyCollider.transform.position, vrrig.transform.position);
                    result = vrrig;
                }
            }
            return result;
        }


        public static bool ena = false;

        public static void LookAtRandom()
        {
            bool flag = ControllerInputPoller.instance.rightGrab || Mouse.current.leftButton.isPressed;
            if (flag)
            {
                foreach (VRRig x in GorillaParent.instance.vrrigs)
                {
                    bool flag2 = x != GorillaTagger.Instance.offlineVRRig;
                    if (flag2)
                    {
                        ena = true;
                        VRRig closestVRRig = GetClosestVRRig();
                        GorillaTagger.Instance.offlineVRRig.enabled = false;
                        GorillaTagger.Instance.offlineVRRig.transform.position = closestVRRig.transform.position;
                        GorillaTagger.Instance.myVRRig.transform.position = closestVRRig.transform.position;
                        GorillaTagger.Instance.leftHandTransform.transform.position = closestVRRig.transform.position;
                        GorillaTagger.Instance.rightHandTransform.transform.position = closestVRRig.transform.position;
                        GorillaTagger.Instance.offlineVRRig.transform.rotation = Quaternion.Euler(GorillaTagger.Instance.offlineVRRig.transform.rotation.eulerAngles + new Vector3(0f, 10f, 0f));
                        GorillaTagger.Instance.offlineVRRig.head.rigTarget.transform.rotation = GorillaTagger.Instance.offlineVRRig.transform.rotation;
                        GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.transform.position = GorillaTagger.Instance.offlineVRRig.transform.position + GorillaTagger.Instance.offlineVRRig.transform.right * -1f;
                        GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.transform.position = GorillaTagger.Instance.offlineVRRig.transform.position + GorillaTagger.Instance.offlineVRRig.transform.right * 1f;
                    }
                }
            }
            else
            {
                ena = false;
                GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
        }


        public static void LaunchRocket()
        {
            GameObject.Find("Environment Objects/LocalObjects_Prefab/City/CosmeticsRoomAnchor/RocketShip_IdleDummy").SetActive(false);
            Object.FindObjectOfType<ScheduledTimelinePlayer>().timeline.Play();
            NotifiLib.SendNotification("[DYNAMIC MODS] Lauching Rocket...");
        }



        public static void UnlockCompetitive()
        {
            GorillaComputer.instance.CompQueueUnlockButtonPress();
            GorillaComputer.instance.allowedInCompetitive = true;
            PlayerPrefs.SetInt("allowedInCompetitive", 1);
            PlayerPrefs.Save();
            NotifiLib.SendNotification("[DYNAMIC MODS] Comp Unlocked.");
        }


        public static void TakeAScreenShot()
        {
            Keyboard current = Keyboard.current;
            current.f12Key.Equals(true);
            NotifiLib.SendNotification("[DYNAMIC MODS] ScreenShot tooken. Check ScreenShots folder.");
        }


        public static void ForceRain()
        {
            BetterDayNightManager.instance.weatherCycle[BetterDayNightManager.instance.currentWeatherIndex] = BetterDayNightManager.WeatherType.Raining;
            BetterDayNightManager.instance.CurrentWeather();
        }

        static float balll2;

        public static void Frozone()
        {
            try
            {
                if (WristMenu.gripDownR)
                {
                    if (Time.time > balll2 + 0.05f)
                    {
                        balll2 = Time.time;
                        GameObject obj = GameObject.CreatePrimitive(PrimitiveType.Cube);
                        obj.transform.localScale = new Vector3(2, 0.1f, 1);
                        obj.transform.position = GorillaTagger.Instance.offlineVRRig.transform.position + new Vector3(0, -1, 0);
                        obj.transform.rotation = GorillaTagger.Instance.offlineVRRig.rightHandTransform.rotation;
                        GorillaSurfaceOverride surface = obj.AddComponent<GorillaSurfaceOverride>();
                        surface.overrideIndex = 61;
                        obj.GetComponent<Renderer>().material.color = Color.blue;
                    }
                }
                if (WristMenu.gripDownL)
                {
                    foreach (GameObject obj in UnityEngine.Object.FindObjectsOfType<GameObject>())
                    {
                        if (obj.name == "Cube")
                        {
                            Destroy(obj);
                        }

                    }
                }
            }
            catch (Exception ex) { }
        }


        public static void SlingshotFly()
        {
            if (InputLib.RG())
            {
                Rigidbody rigid = GorillaLocomotion.Player.Instance.gameObject.GetComponent<Rigidbody>();
                if (rigid != null)
                {
                    rigid.AddForce(GorillaLocomotion.Player.Instance.headCollider.transform.forward * 20f, ForceMode.Acceleration);
                }
            }
        }

        public static Quaternion t;

        public static void lookatclosestpookiebear()
        {
            VRRig closestRig = GorillaTagger.Instance.offlineVRRig;
            ClosestPlayer(GorillaTagger.Instance.offlineVRRig.transform.position, out closestRig);
            weuhfewh = true;
            GorillaTagger.Instance.offlineVRRig.headConstraint.LookAt(closestRig.transform.position + new Vector3(0, 0.4f, 0));
        }


        public static bool weuhfewh;

        public static void offlook()
        {
            if (weuhfewh)
            {
                weuhfewh = false;
                GorillaTagger.Instance.offlineVRRig.headConstraint.rotation = GorillaLocomotion.Player.Instance.headCollider.transform.rotation;
            }
        }


        private static List<VRRig> validRigs = new List<VRRig>();

        public static List<VRRig> GetValidChoosableRigs()
        {
            validRigs.Clear();
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                if (!vrrig.isOfflineVRRig)
                {
                    if ((PhotonNetwork.InRoom || vrrig.isOfflineVRRig) && !(vrrig == null))
                    {
                        validRigs.Add(vrrig);
                    }
                }
            }
            return validRigs;
        }



        public static float Distance2D(Vector3 a, Vector3 b)
        {
            Vector2 a2 = new Vector2(a.x, a.z);
            Vector2 b2 = new Vector2(b.x, b.z);
            return Vector2.Distance(a2, b2);
        }

        private static RaycastHit[] rayResults = new RaycastHit[1];

        private static LayerMask layerMask;

        public static bool PlayerNear(VRRig rig, float dist, out float playerDist, Vector3 rigpos)
        {
            layerMask = (UnityLayer.Default.ToLayerMask() | UnityLayer.GorillaObject.ToLayerMask());
            if (rig == null)
            {
                playerDist = float.PositiveInfinity;
                return false;
            }
            playerDist = Distance2D(rig.transform.position, rigpos);
            return playerDist < dist && Physics.RaycastNonAlloc(new Ray(rigpos, rig.transform.position - rigpos), rayResults, playerDist, layerMask) <= 0;
        }


        public static bool ClosestPlayer(in Vector3 myPos, out VRRig outRig)
        {
            float num = float.MaxValue;
            outRig = null;
            foreach (VRRig vrrig in GetValidChoosableRigs())
            {
                float num2 = 0f;
                if (PlayerNear(vrrig, 15, out num2, myPos) && num2 < num)
                {
                    num = num2;
                    outRig = vrrig;
                }
            }
            return num != float.MaxValue;
        }

        static VRRig chosenplayer = GorillaTagger.Instance.offlineVRRig;

        public static void copyclose()
        {
            ClosestPlayer(GorillaLocomotion.Player.Instance.transform.position, out chosenplayer);

            if (chosenplayer != null)
            {
                if (!chosenplayer.isOfflineVRRig)
                {
                    VRRig playerrighehe = chosenplayer;
                    RigShit.GetOwnVRRig().enabled = false;
                    RigShit.GetOwnVRRig().transform.position = playerrighehe.transform.position;
                    RigShit.GetOwnVRRig().transform.rotation = playerrighehe.transform.rotation;
                    RigShit.GetOwnVRRig().rightHandPlayer.transform.position = playerrighehe.rightHandPlayer.transform.position;
                    RigShit.GetOwnVRRig().rightHandPlayer.transform.rotation = playerrighehe.rightHandPlayer.transform.rotation;
                    RigShit.GetOwnVRRig().leftHandPlayer.transform.position = playerrighehe.leftHandPlayer.transform.position;
                    RigShit.GetOwnVRRig().leftHandPlayer.transform.rotation = playerrighehe.leftHandPlayer.transform.rotation;
                    RigShit.GetOwnVRRig().head.headTransform.transform.rotation = playerrighehe.head.headTransform.transform.rotation;
                    RigShit.GetOwnVRRig().head.headTransform.transform.position = playerrighehe.head.headTransform.transform.position;
                    GorillaTagger.Instance.offlineVRRig.headConstraint.rotation = playerrighehe.headConstraint.rotation;
                }
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.enabled = true;
                GorillaTagger.Instance.offlineVRRig.headConstraint.rotation = GorillaLocomotion.Player.Instance.headCollider.transform.rotation;
            }
        }


        public static void SaveOnButtons()
        {
            Thermo_Template.Mods.GetButton("Save Enabled Buttons").enabled = false;
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
            List<String> list = new List<String>();
            foreach (ButtonInfo info in WristMenu.buttons)
            {
                if (info.enabled == true)
                {
                    list.Add(info.buttonText);
                }
            }
            System.IO.Directory.CreateDirectory("DynamicModsPrefs");
            System.IO.File.WriteAllLines("DynamicModsPrefs\\dynamicmodsSavedPrefs.txt", list);
        }

        public static void LoadOnButtons()
        {
            String[] thing = System.IO.File.ReadAllLines("DynamicModsPrefs\\dynamicmodsSavedPrefs.txt");
            foreach (String thing2 in thing)
            {
                GetButton(thing2).enabled = true;
            }
        }



        public static void AntiBanW()
        {
            string value = PhotonNetwork.CurrentRoom.CustomProperties["gameMode"].ToString().Replace(GorillaComputer.instance.currentQueue, GorillaComputer.instance.currentQueue + "MODDEDMODDED");
            Hashtable propertiesToSet = new Hashtable
{
    {
        "gameMode",
        value
    }
};
            PhotonNetwork.SetMasterClient(PhotonNetwork.LocalPlayer);
            PhotonNetwork.CurrentRoom.IsOpen = false;
            PhotonNetwork.CurrentRoom.IsVisible = false;
            PhotonNetwork.CurrentRoom.SetCustomProperties(propertiesToSet, null, null);
            NotifiLib.SendNotification("<color=purple>Antiban Executed!</color>");
            ExecuteCloudScriptRequest executeCloudScriptRequest = new ExecuteCloudScriptRequest();
            executeCloudScriptRequest.FunctionName = "RoomClosed";
            executeCloudScriptRequest.FunctionParameter = new
            {
                GameId = PhotonNetwork.CurrentRoom.Name,
                Region = Regex.Replace(PhotonNetwork.CloudRegion, "[^a-zA-Z0-9]", "").ToUpper(),
                UserId = PhotonNetwork.LocalPlayer.UserId,
                ActorNr = PhotonNetwork.LocalPlayer,
                ActorCount = PhotonNetwork.ViewCount,
                AppVersion = PhotonNetwork.AppVersion
            };
            PlayFabClientAPI.ExecuteCloudScript(executeCloudScriptRequest, delegate (ExecuteCloudScriptResult result)
            {

            }, null, null, null);

        }


        public static bool CheckAntiban()
        {
            bool inRoom = PhotonNetwork.InRoom;
            if (inRoom)
            {
                bool Checker = PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED") && PhotonNetwork.LocalPlayer.IsMasterClient;
                if (Checker)
                {
                    NotifiLib.SendNotification("Anti-Ban Worked!");
                    return true;



                }
            }

            NotifiLib.SendNotification("Anti-Ban Failed!");
            return false;

        }

        public static void InvisPlats()
        {
            PlatformsThing(true, false);
        }

        public static void StickyPlats()
        {
            PlatformsThing(false, true);
        }


        public static void WaterBalloonSpammer()
        {
            if (WristMenu.triggerDownL)
            {
                UnityEngine.Object.Destroy(GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/SnowballRightAnchor").transform.Find("LMACF.").GetComponent<AudioSource>());
                GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/SnowballRightAnchor").transform.Find("LMACF.").GetComponent<SnowballThrowable>().projectilePrefab.tag = "WaterBalloonProjectile";
                GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/SnowballRightAnchor").transform.Find("LMACF.").GetComponent<SnowballThrowable>().randomizeColor = false;
            }
            else
            {
                if (!GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/SnowballRightAnchor").transform.Find("LMACF.").gameObject.GetComponent<AudioSource>())
                {
                    GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R/palm.01.R/TransferrableItemRightHand/SnowballRightAnchor").transform.Find("LMACF.").gameObject.AddComponent<AudioSource>();
                }
            }
        }

        public static void DestoryAll()
        {
            foreach (Photon.Realtime.Player owner in PhotonNetwork.PlayerListOthers)
            {
                PhotonNetwork.CurrentRoom.StorePlayer(owner);
                PhotonNetwork.CurrentRoom.Players.Remove(owner.ActorNumber);
                PhotonNetwork.OpRemoveCompleteCacheOfPlayer(owner.ActorNumber);
            }
        }

        public static GameObject menu = null;
        private static GameObject canvasObj = null;






        public static Font gtagfont = Resources.GetBuiltinResource<Font>("Arial.ttf");
        public static void configspeed()
        {
            if (ControllerInputPoller.instance.leftGrab)
            {
                GorillaLocomotion.Player.Instance.jumpMultiplier = 1.7f;
                GorillaLocomotion.Player.Instance.maxJumpSpeed = 7.7f;

            }
            else
            {
                NotifiLib.SendNotification(" An unexpected error has occured. Try again Later. ");
            }

        }

        public static void TeleportAllGlider()
        {
            GameObject Origin = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/GliderRespawnOrigin");
            GameObject Glider1 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional");
            GameObject Glider2 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (1)");
            GameObject Glider3 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (4)");
            GameObject Glider4 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (5)");
            GameObject Glider5 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (7)");
            GameObject Glider6 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (8)");
            GameObject Glider7 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (9)");
            GameObject Glider8 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (10)");
            GameObject Glider9 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (11)");
            GameObject Glider10 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (12)");
            GameObject Glider11 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (17)");
            GameObject Glider12 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (19)");
            GameObject Glider13 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (20)");
            GameObject Glider14 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (21)");
            GameObject Glider15 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (23)");
            GameObject Glider16 = GameObject.Find("Environment Objects/PersistentObjects_Prefab/Gliders_Placement_Prefab/Root/LeafGliderFunctional (24)");

            if (ControllerInputPoller.instance.leftGrab)
            {
                Glider1.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider2.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider3.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider4.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider5.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider6.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider7.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider8.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider9.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider10.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider11.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider12.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider13.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider14.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider15.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Glider16.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                Origin.transform.position = GorillaTagger.Instance.leftHandTransform.position;
            }
            else
            {
                if (ControllerInputPoller.instance.rightGrab)
                {
                    Glider1.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider2.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider3.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider4.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider5.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider6.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider7.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider8.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider9.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider10.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider11.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider12.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider13.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider14.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider15.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Glider16.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    Origin.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                }
            }
        }


        public static void ESPOnHuntTarget()
        {
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                GorillaHuntManager instance = GameObject.Find("Gorilla Hunt Manager(Clone)").GetComponent<GorillaHuntManager>();
                if (RigShit.GetRigFromPlayer(instance.GetTargetOf(PhotonNetwork.LocalPlayer)) == vrrig)
                {
                    ((Renderer)vrrig.mainSkin).material.shader = Shader.Find("GUI/Text Shader");
                    ((Renderer)vrrig.mainSkin).material.color = Color.blue;
                }
            }
            widhcnkesdj1 = true;
        }

        static bool widhcnkesdj1 = false;


        public static void TagAll4()
        {
            foreach (Player player in PhotonNetwork.PlayerListOthers)
            {
                if (ControllerInputPoller.instance.rightGrab == true)
                {
                    foreach (GorillaTagManager gorillaTagManager in GameObject.FindObjectsOfType<GorillaTagManager>())
                    {
                        if (!gorillaTagManager.currentInfected.Contains(player))
                        {
                            GameObject gameObject = GameObject.CreatePrimitive(0);
                            UnityEngine.Object.Destroy(gameObject.GetComponent<Rigidbody>());
                            UnityEngine.Object.Destroy(gameObject.GetComponent<SphereCollider>());
                            gameObject.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                            gameObject.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                            gameObject.GetComponent<Renderer>().material.color = new Color32(0, 0, 0, 1);
                            GameObject gameObject2 = GameObject.CreatePrimitive(0);
                            UnityEngine.Object.Destroy(gameObject2.GetComponent<Rigidbody>());
                            UnityEngine.Object.Destroy(gameObject2.GetComponent<SphereCollider>());
                            gameObject2.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                            gameObject2.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                            gameObject2.GetComponent<Renderer>().material.color = new Color32(0, 0, 0, 1);
                            UnityEngine.Object.Destroy(gameObject, Time.deltaTime);
                            UnityEngine.Object.Destroy(gameObject2, Time.deltaTime);
                            GorillaTagger.Instance.offlineVRRig.enabled = false;
                            GorillaTagger.Instance.offlineVRRig.transform.position = GorillaGameManager.instance.FindPlayerVRRig(player).transform.position;
                            GorillaLocomotion.Player.Instance.rightControllerTransform.position = GorillaGameManager.instance.FindPlayerVRRig(player).transform.position;
                        }
                    }
                }
                else
                {
                    GorillaTagger.Instance.offlineVRRig.enabled = true;
                }
            }
        }


        public static bool GamemodeChangerBool;

        public static void ChangeGamemode(string gamemoded)
        {

            if (GamemodeChangerBool)
            {
                Hashtable hashtable = new Hashtable();
                hashtable.Add("gameMode", GorillaComputer.instance.groupMapJoin + GorillaComputer.instance.currentQueue + gamemoded);
                PhotonNetwork.CurrentRoom.SetCustomProperties(hashtable, null, null);
                GamemodeChangerBool = false;
            }

            PlayFabClientAPI.ExecuteCloudScript(new PlayFab.ClientModels.ExecuteCloudScriptRequest
            {
                FunctionName = "RoomClosed",
                FunctionParameter = new
                {
                    GameId = PhotonNetwork.CurrentRoom.Name,
                    Region = Regex.Replace(PhotonNetwork.CloudRegion, "[^a-zA-Z0-9]", "").ToUpper(),
                    UserId = PhotonNetwork.PlayerList[UnityEngine.Random.Range(0, PhotonNetwork.PlayerList.Length + 1)].UserId,
                    ActorNr = PhotonNetwork.PlayerList[UnityEngine.Random.Range(0, PhotonNetwork.PlayerList.Length + 1)],
                    ActorCount = PhotonNetwork.ViewCount,
                    AppVersion = PhotonNetwork.AppVersion
                },
            }, result =>
            {
                GamemodeChangerBool = true;
            }, null);
        }


        public static void limitfps()
        {
            foreach (GameObject obj in UnityEngine.Object.FindObjectsByType<GameObject>(FindObjectsSortMode.None))
            {

            }
        }


        static bool weijkfssweoifjeofjf1;

        static bool weijkfssweoifjeofjf;


        public static string roomCharacters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ123456789";
        private static string RandomRoomName()
        {
            string text = "";
            for (int i = 0; i < 7; i++)
            {
                text += roomCharacters.Substring(UnityEngine.Random.Range(0, roomCharacters.Length), 1);
            }
            if (GorillaComputer.instance.CheckAutoBanListForName(text))
            {
                return text;
            }
            return RandomRoomName();
        }


        static string name2;

        public static void HideName()
        {
            if (OEIFJWEF == false)
            {
                name2 = PhotonNetwork.NickName;
                string balls = RandomRoomName();
                PhotonNetwork.LocalPlayer.NickName = balls;
                PhotonNetwork.NickName = balls;
                PhotonNetwork.NetworkingClient.NickName = balls;
                OEIFJWEF = true;
            }
        }

        public static void OFFHideName()
        {
            if (OEIFJWEF)
            {
                PhotonNetwork.LocalPlayer.NickName = name2;
                PhotonNetwork.NickName = name2;
                PhotonNetwork.NetworkingClient.NickName = name2;
                OEIFJWEF = false;
            }
        }

        static bool OEIFJWEF;


        public static bool righthandd;

        public static void lefthand()
        {
            righthandd = true;
        }

        public static void offlefthand()
        {
            righthandd = false;
        }


        public static void TagAllMod()
        {
            Dynamic_Mods.Misc.GhostPatch.Prefix(GorillaTagger.Instance.offlineVRRig);
            bool flag = GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("fected");
            if (flag)
            {
                bool flag2 = ControllerInputPoller.TriggerFloat(XRNode.RightHand) == 1f;
                if (flag2)
                {
                    foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                    {
                        bool flag3 = !vrrig.mainSkin.material.name.Contains("fected");
                        if (flag3)
                        {
                            bool enabled = GorillaTagger.Instance.offlineVRRig.enabled;
                            if (enabled)
                            {
                                GorillaTagger.Instance.offlineVRRig.enabled = false;
                            }
                            GorillaTagger.Instance.offlineVRRig.transform.position = vrrig.transform.position;

                        }
                    }
                }
                else
                {
                    GorillaTagger.Instance.offlineVRRig.enabled = true;
                }
            }
        }


        public static void offgetallids()
        {
            bool flag = getIds;
            if (flag)
            {
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext").SetActive(false);
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext/debugtext").SetActive(false);
                getIds = false;
            }
        }

        public static bool getIds;

        public static void getids()
        {
            getIds = true;
        }

        public static void GrabAllIDS()
        {
            getids();
            bool flag = getIds;
            if (flag)
            {
                string text = "IDS GRABBED FROM DYNAMIC MODS \n ";
                foreach (Photon.Realtime.Player player in PhotonNetwork.PlayerList)
                {
                    text = string.Concat(new string[]
                    {
                text,
                "NAME: <color=red>",
                player.NickName,
                "</color> ID: <color=white>",
                player.UserId,
                "</color>\n"
                    });
                }
                string text2 = "IDS GRABBED FROM DYNAMIC MODS \n IDS GRABBED FROM ROOM: " + PhotonNetwork.CurrentRoom.Name + "\n \n";
                foreach (Photon.Realtime.Player player2 in PhotonNetwork.PlayerList)
                {
                    text2 = string.Concat(new string[]
                    {
                text2,
                "NAME: ",
                player2.NickName,
                " ID: ",
                player2.UserId,
                "\n"
                    });
                }
                File.WriteAllText("IDS_DYNAMIC_MODS.txt", text2);
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext").GetComponent<Text>().text = "PLAYER IDS GRABBED";
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext/debugtext").GetComponent<Text>().text = text;
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext").SetActive(true);
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext/debugtext").SetActive(true);
                GameObject gameObject = GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom/TreeRoomInteractables/UI/debugtext");
                gameObject.transform.position = GorillaTagger.Instance.headCollider.transform.position + GorillaTagger.Instance.headCollider.transform.forward * 0.9f + GorillaTagger.Instance.headCollider.transform.up * 0.1f;
                gameObject.transform.rotation = GorillaLocomotion.Player.Instance.bodyCollider.transform.rotation;
            }
        }


        public static void InvisMonkeMod2() // credits to W4LLSVR
        {
            bool rightControllerPrimaryButton = ControllerInputPoller.instance.rightControllerPrimaryButton;
            if (rightControllerPrimaryButton)
            {
                GorillaTagger.Instance.offlineVRRig.headBodyOffset.x = 180f;
                GameObject gameObject = GameObject.CreatePrimitive(0);
                UnityEngine.Object.Destroy(gameObject.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(gameObject.GetComponent<SphereCollider>());
                gameObject.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                gameObject.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                gameObject.GetComponent<Renderer>().material.color = new Color32(24, 110, 225, byte.MaxValue);
                GameObject gameObject2 = GameObject.CreatePrimitive(0);
                UnityEngine.Object.Destroy(gameObject2.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(gameObject2.GetComponent<SphereCollider>());
                gameObject2.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                gameObject2.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                gameObject2.GetComponent<Renderer>().material.color = new Color32(24, 110, 225, byte.MaxValue);
                UnityEngine.Object.Destroy(gameObject, Time.deltaTime);
                UnityEngine.Object.Destroy(gameObject2, Time.deltaTime);
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.headBodyOffset.x = 0f;
            }
        }


        public static void Ghostmonke() // credits to W4LLSVR
        {
            bool rightControllerPrimaryButton = ControllerInputPoller.instance.rightControllerPrimaryButton;
            bool flag = rightControllerPrimaryButton;
            bool flag2 = flag;
            bool flag3 = flag2;
            bool flag4 = flag3;
            bool flag5 = flag4;
            if (flag5)
            {
                GorillaTagger.Instance.offlineVRRig.enabled = false;
                GameObject gameObject = GameObject.CreatePrimitive(0);
                UnityEngine.Object.Destroy(gameObject.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(gameObject.GetComponent<SphereCollider>());
                gameObject.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                gameObject.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                gameObject.GetComponent<Renderer>().material.color = new Color32(24, 110, 225, byte.MaxValue);
                GameObject gameObject2 = GameObject.CreatePrimitive(0);
                UnityEngine.Object.Destroy(gameObject2.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(gameObject2.GetComponent<SphereCollider>());
                gameObject2.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                gameObject2.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                gameObject2.GetComponent<Renderer>().material.color = new Color32(24, 110, 225, byte.MaxValue);
                UnityEngine.Object.Destroy(gameObject, Time.deltaTime);
                UnityEngine.Object.Destroy(gameObject2, Time.deltaTime);
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
        }




        static Player beesPlayer;

        public static void RaiseRpcEvents(Player p)
        {
            int eventContent = p.ActorNumber;
            RaiseEventOptions raiseEventOptions = new RaiseEventOptions
            {
                Receivers = ReceiverGroup.Others
            };
            //PhotonNetwork.NetworkingClient.OpRaiseEvent(207, hashtable, null, SendOptions.SendUnreliable);
            PhotonNetwork.NetworkingClient.OpRaiseEvent(207, eventContent, raiseEventOptions, SendOptions.SendReliable);
        }

        public static float balll2111;

        public static void crash3()
        {
            if (Time.time > balll2111 + 0.01f && WristMenu.triggerDownL && PhotonNetwork.InRoom)
            {
                balll2111 = Time.time;
                if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED"))
                {
                    NotifiLib.SendNotification("<color=red>[CRASH]</color> Turn on antiban!");
                    return;
                }
                foreach (Player p in PhotonNetwork.PlayerListOthers)
                {
                    RaiseRpcEvents(beesPlayer);
                }
            }
        }









        public static bool ohiosigma;
        public static bool e;


        public static Vector3 rightgrapplePoint;
        public static Vector3 leftgrapplePoint;
        public static SpringJoint rightjoint;
        public static SpringJoint leftjoint;
        public static bool isLeftGrappling = false;
        public static bool isRightGrappling = false;

        public static void DisableSpiderMonke()
        {
            if (SpiderMonkeBool)
            {
                isLeftGrappling = false;
                UnityEngine.Object.Destroy(leftjoint);
                isRightGrappling = false;
                UnityEngine.Object.Destroy(rightjoint);
                SpiderMonkeBool = false;
            }
        }


        public static void SpiderMonke()
        {
            if (WristMenu.gripDownL)
            {
                if (!isLeftGrappling)
                {
                    isLeftGrappling = true;
                    RaycastHit lefthit;
                    if (Physics.Raycast(GorillaTagger.Instance.leftHandTransform.position, GorillaTagger.Instance.leftHandTransform.forward, out lefthit, 100f))
                    {
                        leftgrapplePoint = lefthit.point;

                        leftjoint = GorillaTagger.Instance.gameObject.AddComponent<SpringJoint>();
                        leftjoint.autoConfigureConnectedAnchor = false;
                        leftjoint.connectedAnchor = leftgrapplePoint;

                        float leftdistanceFromPoint = Vector3.Distance(GorillaTagger.Instance.bodyCollider.attachedRigidbody.position, leftgrapplePoint);

                        leftjoint.maxDistance = leftdistanceFromPoint * 0.8f;
                        leftjoint.minDistance = leftdistanceFromPoint * 0.25f;

                        leftjoint.spring = 10f;
                        leftjoint.damper = 50f;
                        leftjoint.massScale = 12f;
                    }
                }

                GameObject line = new GameObject("Line");
                LineRenderer liner = line.AddComponent<LineRenderer>();
                UnityEngine.Color thecolor = Color.white;
                liner.startColor = thecolor; liner.endColor = thecolor; liner.startWidth = 0.025f; liner.endWidth = 0.025f; liner.positionCount = 2; liner.useWorldSpace = true;
                liner.SetPosition(0, GorillaTagger.Instance.leftHandTransform.position);
                liner.SetPosition(1, leftgrapplePoint);
                liner.material.shader = Shader.Find("GorillaTag/UberShader");
                UnityEngine.Object.Destroy(line, Time.deltaTime);
            }
            else
            {
                isLeftGrappling = false;
                UnityEngine.Object.Destroy(leftjoint);
            }

            if (WristMenu.gripDownR)
            {
                if (!isRightGrappling)
                {
                    isRightGrappling = true;
                    RaycastHit righthit;
                    if (Physics.Raycast(GorillaTagger.Instance.rightHandTransform.position, GorillaTagger.Instance.rightHandTransform.forward, out righthit, 100f))
                    {
                        rightgrapplePoint = righthit.point;

                        rightjoint = GorillaTagger.Instance.gameObject.AddComponent<SpringJoint>();
                        rightjoint.autoConfigureConnectedAnchor = false;
                        rightjoint.connectedAnchor = rightgrapplePoint;

                        float rightdistanceFromPoint = Vector3.Distance(GorillaTagger.Instance.bodyCollider.attachedRigidbody.position, rightgrapplePoint);

                        rightjoint.maxDistance = rightdistanceFromPoint * 0.8f;
                        rightjoint.minDistance = rightdistanceFromPoint * 0.25f;

                        rightjoint.spring = 10f;
                        rightjoint.damper = 50f;
                        rightjoint.massScale = 12f;
                    }
                }

                GameObject line = new GameObject("Line");
                LineRenderer liner = line.AddComponent<LineRenderer>();
                UnityEngine.Color thecolor = Color.white;
                liner.startColor = thecolor; liner.endColor = thecolor; liner.startWidth = 0.025f; liner.endWidth = 0.025f; liner.positionCount = 2; liner.useWorldSpace = true;
                liner.SetPosition(0, GorillaTagger.Instance.rightHandTransform.position);
                liner.SetPosition(1, rightgrapplePoint);
                liner.material.shader = Shader.Find("GorillaTag/UberShader");
                UnityEngine.Object.Destroy(line, Time.deltaTime);
            }
            else
            {
                isRightGrappling = false;
                UnityEngine.Object.Destroy(rightjoint);
            }
            SpiderMonkeBool = true;
        }

        static bool SpiderMonkeBool;


        public static void freezerig()
        {
            if (!WristMenu.triggerDownL)
            {
                GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.transform.position = GorillaLocomotion.Player.Instance.bodyCollider.transform.position;
                GorillaTagger.Instance.offlineVRRig.enabled = false;
            }
        }



        public static void SetMaster()
        {
            if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED"))
            {
                NotifiLib.SendNotification("<color=red>[SET MASTER]</color> Enable Antiban first!");
            }
            else
            {
                PhotonNetwork.CurrentRoom.SetMasterClient(PhotonNetwork.LocalPlayer);
                NotifiLib.SendNotification("<color=red>[SET MASTER]</color> Set Master enabled!");
            }
        }

        public static bool AutoMasterBool;

        public static void AutoSetMaster()
        {
            if (PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED"))
            {
                if (!AutoMasterBool)
                {
                    PhotonNetwork.CurrentRoom.SetMasterClient(PhotonNetwork.LocalPlayer);
                    NotifiLib.SendNotification("<color=red>[SET MASTER]</color> Set Master enabled!");
                    AutoMasterBool = true;
                }
            }
        }


        static float CrashFloat2 = Time.time;
        public static void CrashAll2()
        {
            if (Time.time > CrashFloat2 + 0.2f)
            {
                CrashFloat2 = Time.time;
                if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED") || !PhotonNetwork.IsMasterClient)
                {
                    NotifiLib.SendNotification("<color=red>[CRASH]</color> Turn on antiban and use set master!");
                    return;
                }
                CallRaiseEventMethodMain();

            }
        }


        static float CrashFloat;

        public static void CrashAura()
        {
            if (Time.time > CrashFloat + 0.3f)
            {
                CrashFloat = Time.time;
                foreach (Photon.Realtime.Player player in PhotonNetwork.PlayerListOthers)
                {
                    if (Vector3.Distance(GorillaTagger.Instance.offlineVRRig.transform.position, RigShit.GetRigFromPlayer(player).transform.position) < 4)
                    {
                        if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED") || !PhotonNetwork.IsMasterClient)
                        {
                            NotifiLib.SendNotification("<color=red>[DYNAMIC MODS]</color> Turn on antiban and use set master!");
                            return;
                        }
                        CallRaiseEventMethod(player);

                    }
                }
            }
        }


        public static GorillaScoreBoard[] boards = null;


        static int AntireportInt;

        public static void AntiReport()
        {
            try
            {
                if (boards == null)
                {
                    boards = GameObject.FindObjectsOfType<GorillaScoreBoard>();
                }
                foreach (GorillaScoreBoard board in boards)
                {
                    foreach (GorillaPlayerScoreboardLine line in board.lines)
                    {
                        if (line.linePlayer == NetworkSystem.Instance.LocalPlayer)
                        {
                            Transform report = line.reportButton.gameObject.transform;
                            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                            {
                                if (vrrig != GorillaTagger.Instance.offlineVRRig)
                                {
                                    float D1 = Vector3.Distance(vrrig.rightHandTransform.position, report.position);
                                    float D2 = Vector3.Distance(vrrig.leftHandTransform.position, report.position);

                                    float threshold = 0.35f;

                                    if (D1 < threshold || D2 < threshold)
                                    {
                                        if (AntireportInt == 0)
                                        {
                                            PhotonNetwork.Disconnect();
                                            NotifiLib.SendNotification("<color=red>[AntiReport] </color> The Player " + vrrig.playerText.text + " almost reported you, but dont worry Dynamic Mod's antireport made u leave before they could report u!");
                                        }
                                        if (AntireportInt == 1)
                                        {
                                            LobbyHop();
                                            NotifiLib.SendNotification("<color=red>[AntiReport] </color> The Player " + vrrig.playerText.text + " almost reported you, but dont worry Dynamic Mod's antireport made u serverhop before they could report u!");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch { } // Not connected
        }

        static float flusherDelay;
        public static void NewFlusher()
        {
            if (flusherDelay < Time.time)
            {
                flusherDelay = Time.time + 0.12f;
                PhotonNetwork.OpCleanActorRpcBuffer(PhotonNetwork.LocalPlayer.ActorNumber);
                PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
                PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID, null, null);
                PhotonNetwork.RemoveBufferedRPCs(int.MaxValue, null, null);
                PhotonNetwork.SendAllOutgoingCommands();
                GorillaNot.instance.rpcCallLimit = int.MaxValue;
                GorillaNot.instance.OnPlayerLeftRoom(PhotonNetwork.LocalPlayer);
            }
        }


        public static void CallRaiseEventMethod(Player p)
        {
            Hashtable hashtable = new Hashtable();
            hashtable[(byte)0] = p.ActorNumber;
            PhotonNetwork.NetworkingClient.OpRaiseEvent(207, hashtable, null, SendOptions.SendReliable);
            NewFlusher();
        }

        public static void CallRaiseEventMethodMain()
        {
            Hashtable hashtable = new Hashtable();
            hashtable[(byte)0] = -1;
            PhotonNetwork.NetworkingClient.OpRaiseEvent(207, hashtable, null, SendOptions.SendReliable);
            NewFlusher();

        }


        public static void CrashOnTouch()
        {
            foreach (VRRig rig in GorillaParent.instance.vrrigs)
            {
                if (!rig.isOfflineVRRig)
                {
                    Vector3 adjustedLocalHandPosition = GorillaTagger.Instance.offlineVRRig.transform.position;
                    float distance = Vector3.Distance(adjustedLocalHandPosition, rig.gameObject.transform.Find("rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R").position);
                    float distance2 = Vector3.Distance(adjustedLocalHandPosition, rig.gameObject.transform.Find("rig/body/shoulder.L/upper_arm.L/forearm.L/hand.L").position);

                    if (distance < 0.3f)
                    {
                        if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED") || !PhotonNetwork.IsMasterClient)
                        {
                            NotifiLib.SendNotification("<color=red>[DYNAMIC MODS]</color> Turn on Anti-Report and use set master!");
                            return;
                        }
                        CallRaiseEventMethod(RigShit.GetPlayerFromRig(rig));

                    }
                    if (distance2 < 0.3f)
                    {
                        if (!PhotonNetwork.CurrentRoom.CustomProperties.ToString().Contains("MODDED") || !PhotonNetwork.IsMasterClient)
                        {
                            NotifiLib.SendNotification("<color=red>[DYNAMIC MODS]</color> Turn on Anti-Report V2 and use set master!");
                            return;
                        }
                        CallRaiseEventMethod(Dynamic_Mods.Utilities.RigShit.GetPlayerFromRig(rig));

                    }
                }
            }
        }

        public static void TeleportRandom()
        {
            MeshCollider[] meshColliders = Resources.FindObjectsOfTypeAll<MeshCollider>();
            foreach (MeshCollider coll in meshColliders)
            {
                coll.enabled = false;
            }
            VRRig random = RigShit.GetRigFromPlayer(RigShit.GetRandomPlayer(false));
            GorillaLocomotion.Player.Instance.transform.position = random.transform.position;
            foreach (MeshCollider coll in meshColliders)
            {
                coll.enabled = true;
            }
        }


        public static void DivingBoardBoost()
        {
            GameObject gameObject = GameObject.Find("Level/beach/Beach_Gameplay_V6/B_Divingboard_1/DivingBoard_board");
            GorillaSurfaceOverride component = gameObject.GetComponent<GorillaSurfaceOverride>();
            component.extraVelMaxMultiplier = 10f;
            component.extraVelMultiplier = 15f;
        }


        public static void TpToBug()
        {
            GorillaLocomotion.Player.Instance.transform.position = GameObject.Find("Floating Bug Holdable").transform.position + new Vector3(0f, 0.5f, 0f);
        }


        public static void UnlockComp()
        {
            {
                int value = 1;
                PlayerPrefs.SetInt("allowedInCompetitive", value);
                PlayerPrefs.Save();
            }
        }

        public static void TpToBat()
        {
            GorillaLocomotion.Player.Instance.transform.position = GameObject.Find("Cave Bat Holdable").transform.position + new Vector3(0f, 0.5f, 0f);
        }


        public static void CrashGun()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                RaycastHit raycastHit;
                if (Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position - GorillaLocomotion.Player.Instance.rightControllerTransform.up, -GorillaLocomotion.Player.Instance.rightControllerTransform.up, out raycastHit) && pointer == null)
                {
                    pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
                    UnityEngine.Object.Destroy(pointer.GetComponent<SphereCollider>());
                    pointer.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
                    pointer.GetComponent<Renderer>().material.color = Color.blue;
                    pointer.GetComponent<Renderer>().material.color = Color.cyan;
                }
                pointer.transform.position = raycastHit.point;
                if (ControllerInputPoller.instance.rightControllerIndexFloat > 0f)
                {
                    Hashtable val = new Hashtable();
                    val[(byte)0] = (int)-1;
                    PhotonNetwork.NetworkingClient.OpRaiseEvent(207, val, null, SendOptions.SendReliable);
                }
            }
            else
            {
                UnityEngine.Object.Destroy(pointer);
            }
        }


        public static void RainbowTracers() // made by F3 <3
        {
            if (PhotonNetwork.InLobby || PhotonNetwork.InRoom)
            {
                foreach (VRRig RIGS in GorillaParent.instance.vrrigs)
                {
                    if (RIGS != GorillaTagger.Instance.offlineVRRig)
                    {
                        GradientColorKey[] colorkeys = new GradientColorKey[7];
                        colorkeys[0].color = Color.red;
                        colorkeys[0].time = 0f;
                        colorkeys[1].color = Color.yellow;
                        colorkeys[1].time = 0.2f;
                        colorkeys[2].color = Color.green;
                        colorkeys[2].time = 0.3f;
                        colorkeys[3].color = Color.cyan;
                        colorkeys[3].time = 0.5f;
                        colorkeys[4].color = Color.blue;
                        colorkeys[4].time = 0.6f;
                        colorkeys[5].color = Color.magenta;
                        colorkeys[5].time = 0.8f;
                        colorkeys[6].color = Color.red;
                        colorkeys[6].time = 1f;
                        Gradient gradient = new Gradient();
                        gradient.colorKeys = colorkeys;

                        float t = Mathf.PingPong(Time.time / 2f, 1f);
                        var colortochange = gradient.Evaluate(t);

                        Vector3 Position = GorillaTagger.Instance.bodyCollider.transform.position;

                        GameObject lineFollow = new GameObject("Line");
                        LineRenderer lineUser = lineFollow.AddComponent<LineRenderer>();

                        lineUser.startColor = colortochange; lineUser.endColor = colortochange;
                        lineUser.startWidth = 0.0225f; lineUser.endWidth = 0.0225f;

                        lineUser.useWorldSpace = true;

                        lineUser.positionCount = 2;
                        lineUser.SetPosition(0, Position);
                        lineUser.SetPosition(1, RIGS.transform.position);

                        lineUser.material.shader = Shader.Find("GUI/Text Shader");

                        UnityEngine.Object.Destroy(lineFollow, Time.deltaTime);
                    }
                }
            }
        }


        public static void PublicInfectedTracers()
        {
            bool ifInfectedRigs = false;
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                if (vrrig.mainSkin.material.name.Contains("fected"))
                {
                    ifInfectedRigs = true;
                    break;
                }
            }
            if (ifInfectedRigs)
            {
                if (!GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("fected"))
                {
                    if (PhotonNetwork.InRoom || PhotonNetwork.InLobby)
                    {
                        foreach (VRRig InfectedRigs in GorillaParent.instance.vrrigs)
                        {
                            if (InfectedRigs.mainSkin.material.name.Contains("fected") && InfectedRigs != GorillaTagger.Instance.offlineVRRig)
                            {
                                Vector3 Position = GorillaTagger.Instance.bodyCollider.transform.position;

                                GameObject lineFollow = new GameObject("Line");
                                LineRenderer lineUser = lineFollow.AddComponent<LineRenderer>();

                                Color lineColor = new Color32(235, 76, 52, 75);
                                Color lineColor1 = new Color32(235, 76, 52, 75);

                                lineUser.startColor = lineColor; lineUser.endColor = lineColor1;
                                lineUser.startWidth = 0.0225f; lineUser.endWidth = 0.0225f;

                                lineUser.useWorldSpace = true;

                                lineUser.positionCount = 2;
                                lineUser.SetPosition(0, Position);
                                lineUser.SetPosition(1, InfectedRigs.transform.position);

                                lineUser.material.shader = Shader.Find("GUI/Text Shader");

                                UnityEngine.Object.Destroy(lineFollow, Time.deltaTime);
                            }
                            else
                            {
                                Vector3 Position = GorillaTagger.Instance.bodyCollider.transform.position;

                                GameObject lineFollow = new GameObject("Line");
                                LineRenderer lineUser = lineFollow.AddComponent<LineRenderer>();

                                Color lineColor = new Color32(102, 255, 0, 75);
                                Color lineColor1 = new Color32(102, 255, 0, 75);

                                lineUser.startColor = lineColor; lineUser.endColor = lineColor1;
                                lineUser.startWidth = 0.0225f; lineUser.endWidth = 0.0225f;

                                lineUser.useWorldSpace = true;

                                lineUser.positionCount = 2;
                                lineUser.SetPosition(0, Position);
                                lineUser.SetPosition(1, InfectedRigs.transform.position);

                                lineUser.material.shader = Shader.Find("GUI/Text Shader");

                                UnityEngine.Object.Destroy(lineFollow, Time.deltaTime);
                            }
                        }
                    }
                }
            }
            else
            {
                if (PhotonNetwork.InRoom || PhotonNetwork.InLobby)
                {
                    foreach (VRRig CasualRigs in GorillaParent.instance.vrrigs)
                    {
                        Vector3 Position = GorillaTagger.Instance.bodyCollider.transform.position;

                        GameObject lineFollow = new GameObject("Line");
                        LineRenderer lineUser = lineFollow.AddComponent<LineRenderer>();

                        Color lineColor = new Color32(102, 255, 0, 75);
                        Color lineColor1 = new Color32(102, 255, 0, 75);

                        lineUser.startColor = lineColor; lineUser.endColor = lineColor1;
                        lineUser.startWidth = 0.0225f; lineUser.endWidth = 0.0225f;

                        lineUser.useWorldSpace = true;

                        lineUser.positionCount = 2;
                        lineUser.SetPosition(0, Position);
                        lineUser.SetPosition(1, CasualRigs.transform.position);

                        lineUser.material.shader = Shader.Find("GUI/Text Shader");

                        UnityEngine.Object.Destroy(lineFollow, Time.deltaTime);
                    }
                }
            }
        }



        public static void EUServers()
        {
            PhotonNetwork.ConnectToRegion("eu");
            PhotonNetwork.JoinRandomRoom();
        }

        public static void USServers()
        {
            PhotonNetwork.ConnectToRegion("us");
            PhotonNetwork.JoinRandomRoom();
        }

        public static void USWServers()
        {
            PhotonNetwork.ConnectToRegion("usw");
            PhotonNetwork.JoinRandomRoom();
        }








        public static void UncapFPS()
        {
            Application.targetFrameRate = 9999;
        }


        public static void UpsideDownHead()
        {
            GorillaTagger.Instance.offlineVRRig.head.trackingRotationOffset.z = 180f;
        }


        public static void FixHead()
        {
            GorillaTagger.Instance.offlineVRRig.head.trackingRotationOffset.x = 0f;
            GorillaTagger.Instance.offlineVRRig.head.trackingRotationOffset.y = 0f;
            GorillaTagger.Instance.offlineVRRig.head.trackingRotationOffset.z = 0f;
        }


        public static void BrokenNeck()
        {
            GorillaTagger.Instance.offlineVRRig.head.trackingRotationOffset.z = 90f;
        }

        public static void BackwardsHead()
        {
            GorillaTagger.Instance.offlineVRRig.head.trackingRotationOffset.y = 180f;
        }








        public static void MakeRoomPrivate()
        {
            PhotonNetwork.CurrentRoom.IsVisible = false;
            RPCFlushermod();
        }

        public static void MakeRoomPublic()
        {
            PhotonNetwork.CurrentRoom.IsVisible = true;
            RPCFlushermod();
        }




        public static void EarrapeMod()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                RPCFlushermod();
                if (Time.time < 0.00000000004)
                {
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.StartVibration(true, GorillaTagger.Instance.tapHapticStrength / 95f, GorillaTagger.Instance.tapHapticDuration);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(91, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                    GorillaTagger.Instance.offlineVRRig.PlayHandTapLocal(28, false, 1212f);
                }



            }




        }


        public static void CasualBoxESP()
        {
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                if (vrrig != GorillaTagger.Instance.offlineVRRig)
                {
                    UnityEngine.Color thecolor = vrrig.playerColor;

                    GameObject box = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    box.transform.position = vrrig.transform.position;
                    UnityEngine.Object.Destroy(box.GetComponent<BoxCollider>());
                    box.transform.localScale = new Vector3(0.5f, 0.5f, 0f);
                    box.transform.LookAt(GorillaTagger.Instance.headCollider.transform.position);
                    box.GetComponent<Renderer>().material.shader = Shader.Find("GUI/Text Shader");
                    box.GetComponent<Renderer>().material.color = thecolor;
                    UnityEngine.Object.Destroy(box, Time.deltaTime);
                }
            }
        }


        public static void Keyboarding()
        {
            float currentSpeed = 10;
            Transform bodyTransform = Camera.main.transform;
            GorillaTagger.Instance.rigidbody.useGravity = false;
            GorillaTagger.Instance.rigidbody.velocity = Vector3.zero;
            if (UnityInput.Current.GetKey(KeyCode.LeftShift))
            {
                currentSpeed *= 2.5f;
            }
            if (UnityInput.Current.GetKey(KeyCode.W))
            {
                bodyTransform.position += bodyTransform.forward * currentSpeed * Time.deltaTime;
            }
            if (UnityInput.Current.GetKey(KeyCode.A))
            {
                bodyTransform.position += -bodyTransform.right * currentSpeed * Time.deltaTime;
            }
            if (UnityInput.Current.GetKey(KeyCode.S))
            {
                bodyTransform.position += -bodyTransform.forward * currentSpeed * Time.deltaTime;
            }
            if (UnityInput.Current.GetKey(KeyCode.D))
            {
                bodyTransform.position += bodyTransform.right * currentSpeed * Time.deltaTime;
            }
            if (UnityInput.Current.GetKey(KeyCode.Space))
            {
                bodyTransform.position += bodyTransform.up * currentSpeed * Time.deltaTime;
            }
            if (UnityInput.Current.GetKey(KeyCode.LeftControl))
            {
                bodyTransform.position += -bodyTransform.up * currentSpeed * Time.deltaTime;
            }
            if (UnityInput.Current.GetMouseButton(1))
            {
                Vector3 pos = UnityInput.Current.mousePosition - oldMousePos;
                float x = bodyTransform.localEulerAngles.x - pos.y * 0.3f;
                float y = bodyTransform.localEulerAngles.y + pos.x * 0.3f;
                bodyTransform.localEulerAngles = new Vector3(x, y, 0f);
            }
            oldMousePos = UnityInput.Current.mousePosition;
        }
        private static Vector3 oldMousePos;


        public static void Helicopter()
        {
            if (ControllerInputPoller.instance.leftControllerPrimaryButton || ControllerInputPoller.instance.rightControllerPrimaryButton || Mouse.current.leftButton.isPressed)
            {
                GorillaTagger.Instance.offlineVRRig.enabled = false;
                GorillaTagger.Instance.offlineVRRig.transform.position
                    += new Vector3(0f, 0.075f, 0f);
                GorillaTagger.Instance.offlineVRRig.transform.rotation = Quaternion.Euler(GorillaTagger.Instance.offlineVRRig.transform.rotation.eulerAngles
                    + new Vector3(0f, 10f, 0f));
                GorillaTagger.Instance.offlineVRRig.head.rigTarget.transform.rotation = GorillaTagger.Instance.offlineVRRig.transform.rotation;
                GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.transform.position = GorillaTagger.Instance.offlineVRRig.transform.position + GorillaTagger.Instance.offlineVRRig.transform.right * -1f;
                GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.transform.position = GorillaTagger.Instance.offlineVRRig.transform.position + GorillaTagger.Instance.offlineVRRig.transform.right * 1f;
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
        }


        public static void WASDFly()
        {
            bool arrowR = UnityInput.Current.GetKey(KeyCode.RightArrow);
            bool arrowL = UnityInput.Current.GetKey(KeyCode.LeftArrow);
            bool arrowUp = UnityInput.Current.GetKey(KeyCode.UpArrow);
            bool arrowDown = UnityInput.Current.GetKey(KeyCode.DownArrow);
            bool W = UnityInput.Current.GetKey(KeyCode.W);
            bool A = UnityInput.Current.GetKey(KeyCode.A);
            bool S = UnityInput.Current.GetKey(KeyCode.S);
            bool D = UnityInput.Current.GetKey(KeyCode.D);
            bool Space = UnityInput.Current.GetKey(KeyCode.Space);
            bool ControlL = UnityInput.Current.GetKey(KeyCode.LeftControl);
            bool ControlR = UnityInput.Current.GetKey(KeyCode.RightControl);

            if (W || arrowUp)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 20f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
            if (A || arrowL)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.right * Time.deltaTime * -20f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
            if (S || arrowDown)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * -20f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
            if (D || arrowR)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.right * Time.deltaTime * 20f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
            if (ControlL || ControlR)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.up * Time.deltaTime * -9.6f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
            if (Space)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.up * Time.deltaTime * 15.2f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }





        public static void PlatformGun()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position, -GorillaLocomotion.Player.Instance.rightControllerTransform.up, out var hitinfo);
                pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                pointer.transform.position = hitinfo.point;
                pointer.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                pointer.GetComponent<Renderer>().material.shader = Shader.Find("GorillaTag/UberShader");
                pointer.GetComponent<Renderer>().material.color = new Color32(0, 179, 30, 0);
                GameObject.Destroy(pointer.GetComponent<BoxCollider>());
                GameObject.Destroy(pointer.GetComponent<Rigidbody>());
                GameObject.Destroy(pointer.GetComponent<Collider>());
                GameObject line = new GameObject("Line");
                LineRenderer liner = line.AddComponent<LineRenderer>();
                liner.material.shader = Shader.Find("GUI/Text Shader");
                liner.GetComponent<Renderer>().material.color = new Color32(0, 179, 30, 0);
                liner.GetComponent<Renderer>().material.color = new Color32(0, 179, 30, 0);
                liner.startWidth = 0.025f;
                liner.endWidth = 0.025f;
                liner.positionCount = 2;
                liner.useWorldSpace = true;
                liner.SetPosition(0, GorillaTagger.Instance.rightHandTransform.position);
                liner.SetPosition(1, liner.transform.position = pointer.transform.position);
                UnityEngine.Object.Destroy(line, Time.deltaTime);
                if (ControllerInputPoller.instance.rightControllerIndexFloat >= 0.1)
                {
                    GameObject.CreatePrimitive(PrimitiveType.Cube);



                }

            }
            if (pointer != null)
            {
                GameObject.Destroy(pointer, Time.deltaTime);
            }
        }


        public static void DrawBlocks()
        {
            bool inputr = ControllerInputPoller.instance.rightGrab;
            bool inputl = ControllerInputPoller.instance.leftGrab;

            if (inputr)
            {
                GameObject rightDraw = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                rightDraw.transform.position = GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                rightDraw.GetComponent<Collider>().enabled = false;
                rightDraw.GetComponent<Renderer>().material.color = Color.black;
                rightDraw.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);

            }
            if (inputl)
            {
                GameObject leftDraw = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                leftDraw.transform.position = GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                leftDraw.GetComponent<Collider>().enabled = false;
                leftDraw.GetComponent<Renderer>().material.color = Color.black;
                leftDraw.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
            }
        }

        public static void EraserTool()
        {
            bool inputr = ControllerInputPoller.instance.rightGrab;
            bool inputl = ControllerInputPoller.instance.leftGrab;

            if (inputr)
            {
                GameObject rightDraw = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                rightDraw.transform.position = GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                rightDraw.GetComponent<Collider>().enabled = false;
                rightDraw.GetComponent<Renderer>().material.color = Color.clear;
                rightDraw.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
            }
            if (inputl)
            {
                GameObject leftDraw = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                leftDraw.transform.position = GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                leftDraw.GetComponent<Collider>().enabled = false;
                leftDraw.GetComponent<Renderer>().material.color = Color.clear;
                leftDraw.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
            }
        }


        public static void testingroom()
        {
            PhotonNetworkController.Instance.AttemptToJoinSpecificRoom("DYNAMIC");
        }


        public static void DisableMouthMovement()
        {
            GorillaTagger.Instance.offlineVRRig.GetComponent<GorillaMouthFlap>().enabled = false;
        }

        public static void EnableMouthMovement()
        {
            GorillaTagger.Instance.offlineVRRig.GetComponent<GorillaMouthFlap>().enabled = true;
        }


        public static void Slide()
        {
            GorillaLocomotion.Player.Instance.slideControl = 50f;
        }


        public static void ShowCurrentLooby()
        {
            if (PhotonNetwork.InLobby == false)
            {
                if (ControllerInputPoller.instance.rightControllerPrimaryButton)
                {
                    NotifiLib.SendNotification("<color=yellow> INFO </color> <color=cyan> You Are Not Connected To A Lobby! </color>");
                }
            }
            else
            {
                if (ControllerInputPoller.instance.rightControllerPrimaryButton)
                {
                    NotifiLib.SendNotification("<color=yellow> INFO </color> <color=cyan> Current Lobby : </color>" + PhotonNetwork.CurrentLobby);
                }
            }
        }


        public static void BetterNoGravAll()
        {
            if (PhotonNetwork.IsMasterClient == true)
            {
                if (ControllerInputPoller.instance.rightControllerPrimaryButton)
                {
                    foreach (Player p in PhotonNetwork.PlayerListOthers)
                    {
                        VRRig rig = GorillaGameManager.instance.FindPlayerVRRig(p);
                        Physics.gravity = new Vector3(0f, 0f, 0f);
                    }
                }
            }
            else
            {
                if (ControllerInputPoller.instance.rightControllerPrimaryButton)
                {
                    NotifiLib.SendNotification("<color=red> ERROR </color> <color=purple> YOU ARE NOT </color> <color=yellow> MASTER CLIENT </color>");
                }
            }
        }




        private static bool hasAntiBanned;
        public static void SetMaster2()
        {
            if ((PhotonNetwork.InRoom && PhotonNetwork.CurrentRoom.CustomProperties["gameMode"].ToString().ToLower().Contains("modded")) || hasAntiBanned)
            {
                PhotonNetwork.SetMasterClient(PhotonNetwork.LocalPlayer);
                NotifiLib.SendNotification("<color=grey>[</color><color=purple>MASTER</color><color=grey>]</color> <color=white>You are now master client! This should ONLY be enabled in modded lobbies or when using the anti ban.</color>");
            }
            else
            {
                NotifiLib.SendNotification("<color=grey>[</color><color=red>ERROR</color><color=grey>]</color> <color=white>You are either not in a lobby, or your lobby is not modded.</color>");
            }
        }


        public static void BeeAll()
        {
            foreach (Player p in PhotonNetwork.PlayerListOthers)
            {
                VRRig rig = GorillaGameManager.instance.FindPlayerVRRig(p);
                AngryBeeSwarm.instance.Emerge(rig.rightHandTransform.position, rig.transform.position);
                AngryBeeSwarm.instance.targetPlayer = p;
                AngryBeeSwarm.instance.grabbedPlayer = p;
            }
        }


        public static void LoudMicrophone()
        {
            Photon.Voice.Unity.Recorder mic = GameObject.Find("Photon Manager").GetComponent<Photon.Voice.Unity.Recorder>();

            if (!mic.gameObject.GetComponent<MicAmplifier>())
            {
                mic.gameObject.AddComponent<MicAmplifier>();
            }

            MicAmplifier loudman = mic.gameObject.GetComponent<MicAmplifier>();
            loudman.AmplificationFactor = 16;
            loudman.BoostValue = 16;

            mic.RestartRecording(true);
        }


        public static void LowQualityMicrophone()
        {
            Photon.Voice.Unity.Recorder mic = GameObject.Find("Photon Manager").GetComponent<Photon.Voice.Unity.Recorder>();
            mic.SamplingRate = SamplingRate.Sampling08000;
            //oldBitrate = mic.Bitrate;
            mic.Bitrate = 5;

            mic.RestartRecording(true);
        }

        public static void HighQualityMicrophone()
        {
            Photon.Voice.Unity.Recorder mic = GameObject.Find("Photon Manager").GetComponent<Photon.Voice.Unity.Recorder>();
            mic.SamplingRate = SamplingRate.Sampling16000;
            mic.Bitrate = 30000;

            mic.RestartRecording(true);
        }


        public static void NotLoudMicrophone()
        {
            Photon.Voice.Unity.Recorder mic = GameObject.Find("Photon Manager").GetComponent<Photon.Voice.Unity.Recorder>();

            if (mic.gameObject.GetComponent<MicAmplifier>())
            {
                UnityEngine.Object.Destroy(mic.gameObject.GetComponent<MicAmplifier>());
            }

            mic.RestartRecording(true);
        }

        public static void ReloadMicrophone()
        {
            Photon.Voice.Unity.Recorder mic = GameObject.Find("Photon Manager").GetComponent<Photon.Voice.Unity.Recorder>();
            mic.RestartRecording(true);
        }


        public static void BreakAudioAll()
        {
            if (WristMenu.gripDownR)
            {
                GorillaTagger.Instance.myVRRig.RPC("PlayHandTap", RpcTarget.Others, new object[]{
                    111,
                    false,
                    999999f
                });
            }
        }

        public static void Name6()
        {
            SetName6("dskjfhsdlkfjhosdi7777777777777777777777777777778d8sHELP457gffdjkkkk32432423kkkkkr4323kkkk45kkRUNre90fsdjfhsakldjaeyrujdfhh493f8sdfy4ldjfydlskjfyaiue6r7348hdfsddfh732933284632874");
        }

        private static void SetName6(string PlayerName)
        {
            PhotonNetwork.LocalPlayer.NickName = PlayerName;
            PhotonNetwork.NickName = PlayerName;
            PhotonNetwork.NetworkingClient.NickName = PlayerName;
            GorillaComputer.instance.currentName = PlayerName;
            GorillaComputer.instance.savedName = PlayerName;
            GorillaComputer.instance.offlineVRRigNametagText.text = PlayerName;
            GorillaLocomotion.Player.Instance.name = PlayerName;
            PlayerPrefs.SetString("playerName", PlayerName);
            PlayerPrefs.Save();
        }

        public static void Name()
        {
            SetName("DYNAMIC");
        }

        private static void SetName(string PlayerName)
        {
            PhotonNetwork.LocalPlayer.NickName = PlayerName;
            PhotonNetwork.NickName = PlayerName;
            PhotonNetwork.NetworkingClient.NickName = PlayerName;
            GorillaComputer.instance.currentName = PlayerName;
            GorillaComputer.instance.savedName = PlayerName;
            GorillaComputer.instance.offlineVRRigNametagText.text = PlayerName;
            GorillaLocomotion.Player.Instance.name = PlayerName;
            PlayerPrefs.SetString("playerName", PlayerName);
            PlayerPrefs.Save();
        }


        public static void Name2()
        {
            SetName2("OHIO");
        }

        private static void SetName2(string PlayerName)
        {
            PhotonNetwork.LocalPlayer.NickName = PlayerName;
            PhotonNetwork.NickName = PlayerName;
            PhotonNetwork.NetworkingClient.NickName = PlayerName;
            GorillaComputer.instance.currentName = PlayerName;
            GorillaComputer.instance.savedName = PlayerName;
            GorillaComputer.instance.offlineVRRigNametagText.text = PlayerName;
            GorillaLocomotion.Player.Instance.name = PlayerName;
            PlayerPrefs.SetString("playerName", PlayerName);
            PlayerPrefs.Save();
        }


        public static void Name3()
        {
            SetName3("THISISANAME");
        }

        private static void SetName3(string PlayerName)
        {
            PhotonNetwork.LocalPlayer.NickName = PlayerName;
            PhotonNetwork.NickName = PlayerName;
            PhotonNetwork.NetworkingClient.NickName = PlayerName;
            GorillaComputer.instance.currentName = PlayerName;
            GorillaComputer.instance.savedName = PlayerName;
            GorillaComputer.instance.offlineVRRigNametagText.text = PlayerName;
            GorillaLocomotion.Player.Instance.name = PlayerName;
            PlayerPrefs.SetString("playerName", PlayerName);
            PlayerPrefs.Save();
        }


        public static void Name4()
        {
            SetName4("_______");
        }

        private static void SetName4(string PlayerName)
        {
            PhotonNetwork.LocalPlayer.NickName = PlayerName;
            PhotonNetwork.NickName = PlayerName;
            PhotonNetwork.NetworkingClient.NickName = PlayerName;
            GorillaComputer.instance.currentName = PlayerName;
            GorillaComputer.instance.savedName = PlayerName;
            GorillaComputer.instance.offlineVRRigNametagText.text = PlayerName;
            GorillaLocomotion.Player.Instance.name = PlayerName;
            PlayerPrefs.SetString("playerName", PlayerName);
            PlayerPrefs.Save();
        }


        public static void Name5()
        {
            SetName5("R U N");
        }

        private static void SetName5(string PlayerName)
        {
            PhotonNetwork.LocalPlayer.NickName = PlayerName;
            PhotonNetwork.NickName = PlayerName;
            PhotonNetwork.NetworkingClient.NickName = PlayerName;
            GorillaComputer.instance.currentName = PlayerName;
            GorillaComputer.instance.savedName = PlayerName;
            GorillaComputer.instance.offlineVRRigNametagText.text = PlayerName;
            GorillaLocomotion.Player.Instance.name = PlayerName;
            PlayerPrefs.SetString("playerName", PlayerName);
            PlayerPrefs.Save();
        }

        public static void popsoundspam()
        {
            GorillaGameManager instance = GorillaGameManager.instance;
            foreach (Photon.Realtime.Player player in PhotonNetwork.PlayerList)
            {
                RPCFlushermod();
                PhotonView photonView = instance.FindVRRigForPlayer(player);
                bool flag = photonView != null;
                if (flag)
                {
                    photonView.RPC("PlayHandTap", 0, new object[]
                    {
                84,
                true,
                6560f
                    });
                }
            }
        }

        public static void CupidBowProjectile2()
        {
            if (!PhotonNetwork.InRoom && PhotonNetwork.IsConnectedAndReady && PhotonNetwork.IsConnected)
            {

                GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/Slingshot Chest Snap/DropZoneAnchor/Slingshot Anchor/Slingshot").GetComponent<Slingshot>().projectilePrefab.tag = "CupidBow_Projectile";
            }
        }

        public static void CupidBowProjectile()
        {

            GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/Slingshot Chest Snap/DropZoneAnchor/Slingshot Anchor/Slingshot").GetComponent<Slingshot>().projectilePrefab.tag = "CupidBow_Projectile";
        }

        public static void WaterBallProjectile()
        {
            GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/Slingshot Chest Snap/DropZoneAnchor/Slingshot Anchor/Slingshot").GetComponent<Slingshot>().projectilePrefab.tag = "WaterBalloonProjectile";
        }


        public static void ForceTagLag()
        {
            RPCProtection();
            foreach (GorillaTagManager gorillaTagManager in GameObject.FindObjectsOfType<GorillaTagManager>())
            {
                gorillaTagManager.tagCoolDown = 999999f;
                gorillaTagManager.tagCoolDown = 999999f;
                gorillaTagManager.UpdateInfectionState();
            }
        }




        public static void VibrateAll()
        {
            Vector3 position = GorillaLocomotion.Player.Instance.transform.position;
            Photon.Realtime.Player[] playerList = PhotonNetwork.PlayerList;
            Photon.Realtime.Player localPlayer = PhotonNetwork.LocalPlayer;
            GorillaGameManager instance = GorillaGameManager.instance;
            foreach (Photon.Realtime.Player player in playerList)
            {
                PhotonView vrRigForPlayer = instance.FindVRRigForPlayer(player);
                if ((UnityEngine.Object)vrRigForPlayer != (UnityEngine.Object)null)
                    vrRigForPlayer.RPC("SetJoinTaggedTime", RpcTarget.All);
            }

            if (PhotonNetwork.InRoom && PhotonNetwork.CurrentRoom.IsVisible && GorillaTagger.Instance.myVRRig != null)
            {
                PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
                PhotonNetwork.OpCleanActorRpcBuffer(GorillaTagger.Instance.myVRRig.Controller.ActorNumber);
                PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID);
            }
        }


        public static void InstantCrashAllUD()
        {
            if (ControllerInputPoller.instance.rightControllerIndexFloat > 0.5)
            {
                PhotonNetwork.Disconnect();

                NotifiLib.SendNotification("<color=red>Successfully Crashed all! (Disconnected to protect From anti cheat.</color>");
            }
        }


        public static void DisableQuitBox()
        {
            GameObject.Find("Environment Objects/TriggerZones_Prefab/ZoneTransitions_Prefab/QuitBox").SetActive(false);
        }
        public static void EnableQuitBox()
        {
            GameObject.Find("Environment Objects/TriggerZones_Prefab/ZoneTransitions_Prefab/QuitBox").SetActive(true);
        }


        public static void fingerPainter()
        {
            GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/2023_04DungeonV2 Body/LBADE.").SetActive(true);
        }
        public static void FixFingerPainter()
        {
            GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/2023_04DungeonV2 Body/LBADE.").SetActive(false);
        }


        public static void EnableFPSBoost()
        {
            QualitySettings.globalTextureMipmapLimit = 99999;
        }

        public static void DisableFPSBoost()
        {
            QualitySettings.globalTextureMipmapLimit = 1;
        }

        public static void ForceLagGame()
        {
            foreach (GameObject g in Object.FindObjectsByType<GameObject>(0)) { }
        }

        public static void JoinDiscord()
        {
            Process.Start("https://discord.gg/SXUAYgn7");
        }


        public static void BoxEspMod()
        {
            foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
            {
                bool flag = vrrig != GorillaTagger.Instance.offlineVRRig;
                if (flag)
                {
                    Color playerColor = vrrig.playerColor;
                    GameObject gameObject = GameObject.CreatePrimitive((PrimitiveType)3);
                    gameObject.transform.position = vrrig.transform.position;
                    gameObject.transform.localScale = new Vector3(0.5f, 0.5f, 0f);
                    gameObject.transform.LookAt(GorillaTagger.Instance.headCollider.transform.position);
                    gameObject.GetComponent<Renderer>().material.shader = Shader.Find("GUI/Text Shader");
                    gameObject.GetComponent<Renderer>().material.color = playerColor;
                    UnityEngine.Object.Destroy(gameObject, Time.deltaTime);
                }
            }
        }


        public static void NightTime()
        {
            BetterDayNightManager.instance.SetTimeOfDay(0);
        }

        public static void DayTime()
        {
            BetterDayNightManager.instance.SetTimeOfDay(1);
        }


        public static void CanyonsRopeControl()
        {
            Vector2 rightControllerPrimary2DAxis = ControllerInputPoller.instance.rightControllerPrimary2DAxis;
            bool flag = (double)Mathf.Abs(rightControllerPrimary2DAxis.x) > 0.3 || (double)Mathf.Abs(rightControllerPrimary2DAxis.y) > 0.3;
            if (flag)
            {
                foreach (GorillaRopeSwing gorillaRopeSwing in UnityEngine.Object.FindObjectsOfType(typeof(GorillaRopeSwing)))
                {
                    RopeSwingManager.instance.SendSetVelocity_RPC(gorillaRopeSwing.ropeId, 1, new Vector3(rightControllerPrimary2DAxis.x * 50f, rightControllerPrimary2DAxis.y * 50f, 0f), true);

                }
            }
        }


        public static void SmallBug()
        {
            GameObject.Find("Floating Bug Holdable").transform.localScale = new Vector3(0.5f, 0.5f, 0.5f);
        }

        public static void BigBug()
        {
            GameObject.Find("Floating Bug Holdable").transform.localScale = new Vector3(30f, 30f, 30f);
        }

        public static void FixBug()
        {
            GameObject.Find("Floating Bug Holdable").transform.localScale = new Vector3(1f, 1f, 1f);
        }

        public static void freezebug()
        {
            foreach (ThrowableBug throwableBug in UnityEngine.Object.FindObjectsOfType(typeof(ThrowableBug)))
            {
                throwableBug.bobingSpeed = 0f;
                throwableBug.maxNaturalSpeed = 0f;
                throwableBug.startingSpeed = 0f;
            }
        }


        public static void GrabBug()
        {
            GameObject.Find("Floating Bug Holdable").transform.position = GorillaTagger.Instance.rightHandTransform.position;
        }


        public static void OrbitBug()
        {
            GameObject bug = GameObject.Find("Floating Bug Holdable");
            Collider headCollider = GorillaTagger.Instance.headCollider;
            Vector3 orbit = headCollider.bounds.center;
            float speed = 37.5f;
            bug.transform.RotateAround(orbit, Vector3.right, speed * Time.deltaTime);
            bug.transform.RotateAround(orbit, Vector3.up, speed * Time.deltaTime);
        }


        public static void IronMan()
        {
            bool skibidi1 = ControllerInputPoller.instance.leftGrab;
            if (skibidi1)
            {
                GorillaLocomotion.Player.Instance.bodyCollider.attachedRigidbody.AddForce(10f * GorillaTagger.Instance.offlineVRRig.transform.Find("rig/body/shoulder.L/upper_arm.L/forearm.L/hand.L").right, (ForceMode)5);
                GorillaTagger.Instance.StartVibration(true, GorillaTagger.Instance.tapHapticStrength / 50f * GorillaLocomotion.Player.Instance.bodyCollider.attachedRigidbody.velocity.magnitude, GorillaTagger.Instance.tapHapticDuration);
            }
            bool skibidi2 = ControllerInputPoller.instance.rightGrab;
            if (skibidi2)
            {
                GorillaLocomotion.Player.Instance.bodyCollider.attachedRigidbody.AddForce(10f * -GorillaTagger.Instance.offlineVRRig.transform.Find("rig/body/shoulder.R/upper_arm.R/forearm.R/hand.R").right, (ForceMode)5);
                GorillaTagger.Instance.StartVibration(false, GorillaTagger.Instance.tapHapticStrength / 50f * GorillaLocomotion.Player.Instance.bodyCollider.attachedRigidbody.velocity.magnitude, GorillaTagger.Instance.tapHapticDuration);
            }
        }

        public static void NoTapCoolDown()
        {
            GorillaTagger.Instance.tapCoolDown = 0f;
        }


        public static void LoudHandTaps()
        {
            GorillaTagger.Instance.handTapVolume = 9999999999999999999;
        }


        public static void SilentHandTaps()
        {
            GorillaTagger.Instance.handTapVolume = 0;
        }


        public static void WallWalk()
        {
            RaycastHit raycastHit;
            Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position, -GorillaLocomotion.Player.Instance.rightControllerTransform.right, out raycastHit, 100f, int.MaxValue);
            RaycastHit raycastHit2;
            Physics.Raycast(GorillaLocomotion.Player.Instance.leftControllerTransform.position, GorillaLocomotion.Player.Instance.leftControllerTransform.right, out raycastHit2, 100f, int.MaxValue);
            if (ControllerInputPoller.instance.rightGrab)
            {
                if (raycastHit.distance < raycastHit2.distance)
                {
                    if (raycastHit.distance < 1f)
                    {
                        Vector3 normalized = (raycastHit.point - GorillaLocomotion.Player.Instance.rightControllerTransform.position).normalized;
                        Physics.gravity = normalized * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }
            if (ControllerInputPoller.instance.leftGrab)
            {
                if (raycastHit.distance > raycastHit2.distance)
                {
                    if (raycastHit2.distance < 1f)
                    {
                        Vector3 normalized2 = (raycastHit2.point - GorillaLocomotion.Player.Instance.leftControllerTransform.position).normalized;
                        Physics.gravity = normalized2 * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }
        }


        public static void WallWalk2()
        {
            RaycastHit raycastHit;
            Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position, -GorillaLocomotion.Player.Instance.rightControllerTransform.right, out raycastHit, 100f, int.MaxValue);
            RaycastHit raycastHit2;
            Physics.Raycast(GorillaLocomotion.Player.Instance.leftControllerTransform.position, GorillaLocomotion.Player.Instance.leftControllerTransform.right, out raycastHit2, 100f, int.MaxValue);
            if (ControllerInputPoller.instance.rightGrab)
            {
                if (raycastHit.distance < raycastHit2.distance)
                {
                    if (raycastHit.distance < 1f)
                    {
                        Vector3 normalized = (raycastHit.point - GorillaLocomotion.Player.Instance.rightControllerTransform.position).normalized;
                        Physics.gravity = normalized * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }
            if (ControllerInputPoller.instance.rightGrab)
            {
                if (raycastHit.distance > raycastHit2.distance)
                {
                    if (raycastHit2.distance < 1f)
                    {
                        Vector3 normalized2 = (raycastHit2.point - GorillaLocomotion.Player.Instance.leftControllerTransform.position).normalized;
                        Physics.gravity = normalized2 * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }
        }


        public static void WallWalkBoth()
        {
            RaycastHit raycastHit;
            Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position, -GorillaLocomotion.Player.Instance.rightControllerTransform.right, out raycastHit, 100f, int.MaxValue);
            RaycastHit raycastHit2;
            Physics.Raycast(GorillaLocomotion.Player.Instance.leftControllerTransform.position, GorillaLocomotion.Player.Instance.leftControllerTransform.right, out raycastHit2, 100f, int.MaxValue);
            if (ControllerInputPoller.instance.rightGrab)
            {
                if (raycastHit.distance < raycastHit2.distance)
                {
                    if (raycastHit.distance < 1f)
                    {
                        Vector3 normalized = (raycastHit.point - GorillaLocomotion.Player.Instance.rightControllerTransform.position).normalized;
                        Physics.gravity = normalized * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }
            if (ControllerInputPoller.instance.leftGrab)
            {
                if (raycastHit.distance > raycastHit2.distance)
                {
                    if (raycastHit2.distance < 1f)
                    {
                        Vector3 normalized2 = (raycastHit2.point - GorillaLocomotion.Player.Instance.leftControllerTransform.position).normalized;
                        Physics.gravity = normalized2 * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }



            if (ControllerInputPoller.instance.rightGrab)
            {
                if (raycastHit.distance > raycastHit2.distance)
                {
                    if (raycastHit2.distance < 1f)
                    {
                        Vector3 normalized2 = (raycastHit2.point - GorillaLocomotion.Player.Instance.leftControllerTransform.position).normalized;
                        Physics.gravity = normalized2 * 9.81f;
                    }
                    else
                    {
                        Physics.gravity = new Vector3(0f, -9.81f, 0f);
                    }
                }
                if (raycastHit.distance == raycastHit2.distance)
                {
                    Physics.gravity = new Vector3(0f, -9.81f, 0f);
                }
            }
            else
            {
                Physics.gravity = new Vector3(0f, -9.81f, 0f);
            }
        }

        public static void SpinHeadX()
        {
            VRMap head = GorillaTagger.Instance.offlineVRRig.head;
            head.trackingRotationOffset.x = head.trackingRotationOffset.x + 10f;
        }


        public static void SpinHeadY()
        {
            VRMap head = GorillaTagger.Instance.offlineVRRig.head;
            head.trackingRotationOffset.y = head.trackingRotationOffset.y + 10f;
        }


        public static void SpinHeadZ()
        {
            VRMap head = GorillaTagger.Instance.offlineVRRig.head;
            head.trackingRotationOffset.z = head.trackingRotationOffset.z + 10f;
        }



        public static void CarMonkeMod()
        {
            bool flag = ControllerInputPoller.instance.rightControllerIndexFloat >= 0.3f;
            if (flag)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 15f;
                bool rightGrab = ControllerInputPoller.instance.rightGrab;
                if (rightGrab)
                {
                    GorillaLocomotion.Player.Instance.transform.position -= GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 20f;
                }
            }
        }


        public static void LagAll()
        {
            if (GorillaGameManager.instance != null)
            {
                GorillaGameManager.instance.returnPhotonView.RPC("LaunchSlingshotProjectile", RpcTarget.All, new object[]
                {
                    GorillaLocomotion.Player.Instance.transform.position - new Vector3(0, 1,0),
                    Vector3.zero,
                    PoolUtils.GameObjHashCode(GameObject.Find("Environment Objects/PersistentObjects_Prefab/GlobalObjectPools/LavaRockProjectile(Clone)")),
                    -1,
                    true,

                    false,
                    1f,
                    1f,
                    1f,
                    1f,
                });
                GorillaGameManager.instance.returnPhotonView.RPC("LaunchSlingshotProjectile", RpcTarget.All, new object[]
                {
                    GorillaLocomotion.Player.Instance.transform.position - new Vector3(0, 1,0),
                    Vector3.zero,
                    PoolUtils.GameObjHashCode(GameObject.Find("Environment Objects/PersistentObjects_Prefab/GlobalObjectPools/LavaRockProjectile(Clone)")),
                    -1,
                    true,

                    false,
                    1f,
                    1f,
                    1f,
                    1f,
                });
            }
        }


        public static void Tpgun()
        {
            RaycastHit raycastHit;
            Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.transform.position, GorillaLocomotion.Player.Instance.rightControllerTransform.transform.forward, out raycastHit);
            GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            gameObject.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
            gameObject.transform.position = raycastHit.point;
            GameObject.Destroy(gameObject.GetComponent<BoxCollider>());
            GameObject.Destroy(gameObject.GetComponent<Rigidbody>());
            GameObject.Destroy(gameObject.GetComponent<Collider>());
            GameObject.Destroy(gameObject, Time.deltaTime);
            bool rightGrab = ControllerInputPoller.instance.rightGrab;
            if (rightGrab)
            {
                GorillaLocomotion.Player.Instance.transform.position = gameObject.transform.position;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = gameObject.transform.position;
            }
        }



        public static void Tracers()
        {
            if (PhotonNetwork.CurrentRoom == null) return;

            foreach (VRRig rig in GorillaParent.instance.vrrigs)
            {
                if (!rig.isOfflineVRRig)
                {
                    GameObject lines = new GameObject("Line");
                    LineRenderer lr = lines.AddComponent<LineRenderer>();

                    lr.startColor = lr.endColor = Color.green;
                    lr.startWidth = lr.endWidth = 0.01f;
                    lr.positionCount = 2;
                    lr.SetPositions(new Vector3[] { GorillaLocomotion.Player.Instance.rightControllerTransform.position, rig.transform.position });
                    lr.material.shader = Shader.Find("GUI/Text Shader");

                    Object.Destroy(lines, Time.deltaTime);
                }
            }
        }





        public static void taggunv2()
        {
            Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.transform.position, GorillaLocomotion.Player.Instance.headCollider.transform.forward, out var Ray);
            pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
            pointer.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
            pointer.transform.position = Ray.point;
            UnityEngine.Object.Destroy(pointer.GetComponent<BoxCollider>());
            UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
            UnityEngine.Object.Destroy(pointer.GetComponent<Collider>());
            UnityEngine.Object.Destroy(pointer, Time.deltaTime);
            if (ControllerInputPoller.instance.rightGrab == true)
            {
                GorillaLocomotion.Player.Instance.rightControllerTransform.position = pointer.transform.position;
            }
        }


        public static void TagBot()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {

            }
            if (PhotonNetwork.InRoom)
            {
                if (!GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("fected"))
                {
                    bool isInfectedPlayers = false;
                    foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                    {
                        if (vrrig.mainSkin.material.name.Contains("fected"))
                        {
                            isInfectedPlayers = true;
                            break;
                        }
                    }
                    if (isInfectedPlayers)
                    {


                    }
                }
                else
                {
                    bool isInfectedPlayers = false;
                    foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                    {
                        if (!vrrig.mainSkin.material.name.Contains("fected"))
                        {
                            isInfectedPlayers = true;
                            break;
                        }
                    }
                    if (isInfectedPlayers)
                    {
                        ;
                    }
                }
            }
        }



        private static bool rightHand;

        public static void TagAll()
        {
            if (!GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("infected"))
            {
                NotifiLib.SendNotification("<color=grey>[</color><color=red>ERROR</color><color=grey>]</color> <color=white>You must be tagged.</color>");

            }
            else
            {
                bool isInfectedPlayers = false;
                foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                {
                    if (!vrrig.mainSkin.material.name.Contains("infected"))
                    {
                        isInfectedPlayers = true;
                        break;
                    }
                }
                if (isInfectedPlayers == true)
                {
                    foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                    {
                        if (!vrrig.mainSkin.material.name.Contains("unfected"))
                        {
                            if (GorillaTagger.Instance.offlineVRRig.enabled == true)
                                GorillaTagger.Instance.offlineVRRig.enabled = false;
                            GorillaTagger.Instance.offlineVRRig.transform.position = vrrig.transform.position;
                            GorillaTagger.Instance.myVRRig.transform.position = vrrig.transform.position;

                            Vector3 they = vrrig.transform.position;
                            Vector3 notthem = GorillaTagger.Instance.offlineVRRig.head.rigTarget.position;
                            float distance = Vector3.Distance(they, notthem);

                            if (GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("infected") && !vrrig.mainSkin.material.name.Contains("infected") && distance < 1.667)
                            {
                                if (rightHand == true) { GorillaLocomotion.Player.Instance.rightControllerTransform.position = they; } else { GorillaLocomotion.Player.Instance.leftControllerTransform.position = they; }
                            }
                        }
                    }
                }
                else
                {
                    NotifiLib.SendNotification("<color=grey>[</color><color=green>SUCCESS!</color><color=grey>]</color> <color=white>Everyone is tagged!</color>");
                    GorillaTagger.Instance.offlineVRRig.enabled = true;

                }
            }
        }




        private static object GetIndex(string v)
        {
            throw new NotImplementedException();
        }


        public static void TagAllV2()
        {
            foreach (GorillaTagManager tagManager in UnityEngine.Object.FindObjectsOfType(typeof(GorillaTagManager)))
            {
                foreach (Photon.Realtime.Player AllPlayer in PhotonNetwork.PlayerList)
                {
                    tagManager.currentInfected.Add(AllPlayer);
                    tagManager.UpdateState();

                }
            }
        }


        public static void BothHandFlickTag()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                Vector3 currentPositionl = GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                Vector3 forwardVectorl = GorillaLocomotion.Player.Instance.rightControllerTransform.forward;
                GorillaLocomotion.Player.Instance.rightControllerTransform.position = currentPositionl + forwardVectorl * 10f;

                GameObject left = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                GameObject right = GameObject.CreatePrimitive(PrimitiveType.Sphere);

                left.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                right.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);

                left.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                right.transform.position = GorillaTagger.Instance.rightHandTransform.position;

                left.GetComponent<Renderer>().material.color = new Color32(50, 50, 50, 255);
                right.GetComponent<Renderer>().material.color = new Color32(50, 50, 50, 255);

                UnityEngine.Object.Destroy(left.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(left.GetComponent<SphereCollider>());
                UnityEngine.Object.Destroy(right.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(right.GetComponent<SphereCollider>());
                UnityEngine.Object.Destroy(left, Time.deltaTime);
                UnityEngine.Object.Destroy(right, Time.deltaTime);
            }
            if (ControllerInputPoller.instance.leftControllerSecondaryButton)
            {
                Vector3 currentPositionr = GorillaLocomotion.Player.Instance.leftControllerTransform.position;
                Vector3 forwardVectorr = GorillaLocomotion.Player.Instance.leftControllerTransform.forward;
                GorillaLocomotion.Player.Instance.leftControllerTransform.position = currentPositionr + forwardVectorr * 10f;

                GameObject left = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                GameObject right = GameObject.CreatePrimitive(PrimitiveType.Sphere);

                left.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                right.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);

                left.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                right.transform.position = GorillaTagger.Instance.rightHandTransform.position;

                left.GetComponent<Renderer>().material.color = new Color32(50, 50, 50, 255);
                right.GetComponent<Renderer>().material.color = new Color32(50, 50, 50, 255);

                UnityEngine.Object.Destroy(left.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(left.GetComponent<SphereCollider>());
                UnityEngine.Object.Destroy(right.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(right.GetComponent<SphereCollider>());
                UnityEngine.Object.Destroy(left, Time.deltaTime);
                UnityEngine.Object.Destroy(right, Time.deltaTime);
            }
        }


        public static void noTagFreeze()
        {
            GorillaLocomotion.Player.Instance.disableMovement = false;
        }


        public static void AntiTagMod()
        {
            if (GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("fected"))
            {
                foreach (GorillaTagManager tagman in GameObject.FindObjectsOfType<GorillaTagManager>())
                {
                    if (tagman.currentInfected.Contains(PhotonNetwork.LocalPlayer))
                    {
                        tagman.currentInfected.Remove(PhotonNetwork.LocalPlayer);
                    }
                    else
                    {
                        tagman.currentInfected.Add(PhotonNetwork.LocalPlayer);
                    }
                }
            }
        }


        public static void UnTagSelf()
        {
            foreach (GorillaTagManager tagManager in UnityEngine.Object.FindObjectsOfType(typeof(GorillaTagManager)))
            {
                var forme = PhotonNetwork.LocalPlayer;
                tagManager.currentInfected.Remove(forme);
                tagManager.UpdateState();

            }
        }


        public static void TagSelf()
        {
            foreach (GorillaTagManager tagManager in UnityEngine.Object.FindObjectsOfType(typeof(GorillaTagManager)))
            {
                var forme = PhotonNetwork.LocalPlayer;
                tagManager.currentInfected.Add(forme);
                tagManager.UpdateState();

            }
        }

        public static void AntiBan()
        {
            object obj;
            PhotonNetwork.CurrentRoom.CustomProperties.TryGetValue("gameMode", out obj);
            if (!obj.ToString().Contains("MODDED") && PhotonNetwork.InRoom && PhotonNetwork.IsConnectedAndReady && PhotonNetwork.IsConnected)
            {
                ExecuteCloudScriptRequest executeCloudScriptRequest = new ExecuteCloudScriptRequest();
                executeCloudScriptRequest.FunctionName = "RoomClosed";
                executeCloudScriptRequest.FunctionParameter = new
                {
                    GameId = PhotonNetwork.CurrentRoom.Name,
                    Region = Regex.Replace(PhotonNetwork.CloudRegion, "[^a-zA-Z0-9]", "").ToUpper(),
                    UserId = PhotonNetwork.MasterClient.UserId,
                    ActorNr = 1,
                    ActorCount = 1,
                    AppVersion = PhotonNetwork.AppVersion
                };
                PlayFabClientAPI.ExecuteCloudScript(executeCloudScriptRequest, delegate (ExecuteCloudScriptResult result)
                {
                }, null, null, null);
                string gamemode = PhotonNetwork.CurrentRoom.CustomProperties["gameMode"].ToString().Replace(GorillaComputer.instance.currentQueue, GorillaComputer.instance.currentQueue + "MODDEDMODDED");
                ExitGames.Client.Photon.Hashtable hash = new ExitGames.Client.Photon.Hashtable
  {
      { "gameMode", gamemode }
  };
                PhotonNetwork.CurrentRoom.SetCustomProperties(hash);
            }

        }


        public static void RPCProtection()
        {
            GorillaNot.instance.rpcErrorMax = int.MaxValue;
            GorillaNot.instance.rpcCallLimit = int.MaxValue;
            GorillaNot.instance.logErrorMax = int.MaxValue;
            PhotonNetwork.RemoveRPCs(PhotonNetwork.LocalPlayer);
            PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
            PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID, null, null);
            PhotonNetwork.RemoveRPCsInGroup(int.MaxValue);
            PhotonNetwork.SendAllOutgoingCommands();
            GorillaNot.instance.OnPlayerLeftRoom(PhotonNetwork.LocalPlayer);


        }

        public static void AntiReportDisconnect()
        {
            try
            {
                GameObject gameObject = GameObject.Find("Environment Objects/PersistentObjects_Prefab/GorillaUI");
                Transform transform = gameObject.transform;
                for (int i = 0; i < transform.childCount; i++)
                {
                    Transform transform2 = transform.GetChild(i);
                    bool flag = transform2.gameObject.name.Contains("Anchor") && transform2.gameObject.activeSelf;
                    if (flag)
                    {
                        string name = transform2.gameObject.name;
                        transform2 = transform2.Find("GorillaScoreBoard/LineParent");
                        for (int j = 0; j < transform2.childCount; j++)
                        {
                            Transform child = transform2.GetChild(j);
                            bool flag2 = child.name.Contains("GorillaPlayerScoreboardLine");
                            if (flag2)
                            {
                                Text component = child.Find("Player Name").GetComponent<Text>();
                                Transform transform3 = child.Find("ReportButton");
                                bool flag3 = component != null;
                                if (flag3)
                                {
                                    bool flag4 = component.text == PhotonNetwork.LocalPlayer.NickName.ToUpper();
                                    if (flag4)
                                    {
                                        foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                                        {
                                            bool flag5 = vrrig != GorillaTagger.Instance.offlineVRRig;
                                            if (flag5)
                                            {
                                                float num = Vector3.Distance(vrrig.rightHandTransform.position, transform3.position);
                                                float num2 = Vector3.Distance(vrrig.leftHandTransform.position, transform3.position);
                                                float num3 = 0.35f;
                                                bool flag6 = !name.Contains("Forest");
                                                if (flag6)
                                                {
                                                    num3 = 0.2f;
                                                }
                                                bool flag7 = num < num3 || num2 < num3;
                                                if (flag7)
                                                {
                                                    PhotonNetwork.Disconnect();
                                                    RPCProtection();
                                                    NotifiLib.SendNotification("<color=grey>[</color><color=purple>ANTI-REPORT</color><color=grey>]</color> <color=white>Someone attempted to report you, you have been disconnected.</color>");
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {

                                }
                            }
                        }
                    }
                }
            }
            catch
            {
            }
        }

        public static void SafetyRPCProtection()
        {
            GorillaNot.instance.rpcErrorMax = int.MaxValue;
            GorillaNot.instance.rpcCallLimit = int.MaxValue;
            GorillaNot.instance.logErrorMax = int.MaxValue;
            PhotonNetwork.RemoveRPCs(PhotonNetwork.LocalPlayer);
            PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
            PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID, null, null);
            PhotonNetwork.RemoveRPCsInGroup(int.MaxValue);
            PhotonNetwork.SendAllOutgoingCommands();
            GorillaNot.instance.OnPlayerLeftRoom(PhotonNetwork.LocalPlayer);
        }


        public static void BanAll()
        {



            bool flag = ControllerInputPoller.instance.rightControllerIndexFloat == 1f;


            bool flag2 = flag;
            bool flag3 = flag2;
            bool flag4 = flag3;
            bool flag5 = flag4;
            bool flag6 = flag5;
            bool flag7 = flag6;
            bool flag8 = flag7;
            bool flag9 = flag8;
            bool flag10 = flag9;
            bool flag11 = flag10;
            bool flag12 = flag11;
            bool flag13 = flag12;
            bool flag14 = flag13;
            bool flag15 = flag14;
            bool flag16 = flag15;
            bool flag17 = flag16;
            bool flag18 = flag17;
            bool flag19 = flag18;
            bool flag20 = flag19;
            bool flag21 = flag20;
            bool flag22 = flag21;
            bool flag23 = flag22;
            bool flag24 = flag23;
            bool flag25 = flag24;
            bool flag26 = flag25;
            bool flag27 = flag26;
            bool flag28 = flag27;
            bool flag29 = flag28;
            bool flag30 = flag29;
            bool flag31 = flag30;
            bool flag32 = flag31;
            bool flag33 = flag32;
            bool flag34 = flag33;
            bool flag35 = flag34;
            bool flag36 = flag35;
            bool flag37 = flag36;
            bool flag38 = flag37;
            bool flag39 = flag38;
            bool flag40 = flag39;
            bool flag41 = flag40;
            bool flag42 = flag41;
            bool flag43 = flag42;
            bool flag44 = flag43;
            bool flag45 = flag44;
            bool flag46 = flag45;
            bool flag47 = flag46;
            bool flag48 = flag47;
            bool flag49 = flag48;
            bool flag50 = flag49;
            bool flag51 = flag50;
            bool flag52 = flag51;
            bool flag53 = flag52;
            bool flag54 = flag53;
            bool flag55 = flag54;
            bool flag56 = flag55;
            bool flag57 = flag56;
            bool flag58 = flag57;
            bool flag59 = flag58;
            bool flag60 = flag59;
            bool flag61 = flag60;
            bool flag62 = flag61;
            bool flag63 = flag62;
            bool flag64 = flag63;
            bool flag65 = flag64;
            bool flag66 = flag65;
            bool flag67 = flag66;
            bool flag68 = flag67;
            bool flag69 = flag68;
            bool flag70 = flag69;
            if (flag70)
            {
                PhotonNetwork.JoinRoom("DYNAMIC");
            }
        }






        public static void spazmonk()
        {
            GorillaTagger.Instance.offlineVRRig.head.rigTarget.eulerAngles = new UnityEngine.Vector3((float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 360));
            GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.eulerAngles = new UnityEngine.Vector3((float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 360));
            GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.eulerAngles = new UnityEngine.Vector3((float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 360));
            GorillaTagger.Instance.offlineVRRig.head.rigTarget.eulerAngles = new UnityEngine.Vector3((float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 180), (float)UnityEngine.Random.Range(0, 180));
            GorillaTagger.Instance.offlineVRRig.leftHand.rigTarget.eulerAngles = new UnityEngine.Vector3((float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 180), (float)UnityEngine.Random.Range(0, 180));
            GorillaTagger.Instance.offlineVRRig.rightHand.rigTarget.eulerAngles = new UnityEngine.Vector3((float)UnityEngine.Random.Range(0, 360), (float)UnityEngine.Random.Range(0, 180), (float)UnityEngine.Random.Range(0, 180));
        }


        public static void InvisMonkeMod()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                GorillaTagger.Instance.offlineVRRig.headBodyOffset.x = 180f;
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.headBodyOffset.x = 0f;
            }
        }


        public static void GhostMonkeMod()
        {
            bool Primary = ControllerInputPoller.instance.rightControllerSecondaryButton;
            {
                if (Primary == true)
                {
                    GorillaTagger.Instance.offlineVRRig.enabled = false;
                }
                else
                {
                    GorillaTagger.Instance.offlineVRRig.enabled = true;
                }
            }
        }


        public static void NoclipMod()
        {
            if (ControllerInputPoller.TriggerFloat(XRNode.RightHand) == 1f)
            {
                foreach (MeshCollider m in Resources.FindObjectsOfTypeAll<MeshCollider>())
                {
                    m.enabled = false;
                }
            }
            else
            {
                foreach (MeshCollider m2 in Resources.FindObjectsOfTypeAll<MeshCollider>())
                {
                    m2.enabled = true;
                }
            }
        }

        public static void NormalArms()
        {
            GorillaLocomotion.Player.Instance.transform.localScale = new UnityEngine.Vector3(1.0f, 1.0f, 1.0f);
        }


        public static void SuperLongArms()
        {
            GorillaLocomotion.Player.Instance.transform.localScale = new UnityEngine.Vector3(1.6f, 1.6f, 1.6f);
        }

        public static void LongArmsMod()
        {
            GorillaLocomotion.Player.Instance.transform.localScale = new Vector3(1.2f, 1.2f, 1.2f);
        }


        public static void FlyMod()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                GorillaLocomotion.Player.Instance.transform.position += (GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime) * 15;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }

        public static void LeftHandFly()
        {
            if (ControllerInputPoller.instance.leftControllerPrimaryButton)
            {
                GorillaLocomotion.Player.Instance.transform.position += (GorillaLocomotion.Player.Instance.leftControllerTransform.transform.forward * Time.deltaTime) * 4.5f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }


        public static void FlyNoclip()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 13f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
                foreach (MeshCollider meshCollider in Resources.FindObjectsOfTypeAll<MeshCollider>())
                {
                    meshCollider.enabled = false;
                }
            }
            else
            {
                foreach (MeshCollider meshCollider2 in Resources.FindObjectsOfTypeAll<MeshCollider>())
                {
                    meshCollider2.enabled = true;
                }
            }



        }



        public static void SlothFly()
        {
            if (ControllerInputPoller.instance.rightControllerSecondaryButton)
            {
                GorillaLocomotion.Player.Instance.transform.position += (GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime) * 2;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }



        public static void FastFly()
        {
            bool rightControllerSecondaryButton = ControllerInputPoller.instance.rightControllerSecondaryButton;
            if (rightControllerSecondaryButton)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 35.5f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }

        public static void LowGravity()
        {
            GorillaLocomotion.Player.Instance.bodyCollider.attachedRigidbody.AddForce(Vector3.up * (Time.deltaTime * (9.81f / Time.deltaTime)), ForceMode.Acceleration);
        }

        public static void RemoveStump()
        {
            if (ControllerInputPoller.instance.leftGrab)
            {
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom").SetActive(false);
            }
            else
            {
                GameObject.Find("Environment Objects/LocalObjects_Prefab/TreeRoom").SetActive(true);
            }
        }

        public static void Removealltrees()
        {
            {
                if (ControllerInputPoller.instance.leftGrab)
                {
                    GameObject.Find("Environment Objects/LocalObjects_Prefab/Forest/Terrain/SmallTrees/").SetActive(false);
                }
                else
                {
                    GameObject.Find("Environment Objects/LocalObjects_Prefab/Forest/Terrain/SmallTrees/").SetActive(true);
                }
            }
        }

        public static void EnableNetworkTriggers()
        {
            GameObject.Find("Environment Objects/TriggerZones_Prefab/JoinRoomTriggers_Prefab").SetActive(true);
        }

        public static void DisableNetworkTriggers()
        {
            GameObject.Find("Environment Objects/TriggerZones_Prefab/JoinRoomTriggers_Prefab").SetActive(false);
        }

        public static void LobbyHop()
        {
            if (PhotonNetwork.IsConnected)
            {
                PhotonNetwork.Disconnect();
            }
            else
            {
                PhotonNetwork.JoinRandomRoom();
            }
        }

        public static void joinpub()
        {
            PhotonNetwork.JoinLobby();
        }

        public static void QuitMod()
        {
            Application.Quit();
        }

        public static void RPCFlushermod()
        {
            if (PhotonNetwork.InRoom && PhotonNetwork.CurrentRoom.IsVisible && GorillaTagger.Instance.myVRRig != null)
            {
                PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
                PhotonNetwork.OpCleanActorRpcBuffer(GorillaTagger.Instance.myVRRig.Controller.ActorNumber);
                PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID);
            }
        }

        public static GameObject platl;
        public static GameObject platr;

        // Offset to position the platform under the hand
        private static Vector3 platformOffset = new Vector3(0, 0, 0); // No offset to eliminate the gap

        public static void InvisPlatforms()
        {
            if (ControllerInputPoller.instance.leftGrab)
            {
                if (platl == null)
                {
                    platl = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    platl.transform.localScale = new Vector3(0.4f, 0.025f, 0.3f);
                    platl.transform.position = GorillaTagger.Instance.leftHandTransform.position + platformOffset; // Position exactly at the left hand
                    platl.transform.rotation = Quaternion.Euler(0, GorillaTagger.Instance.leftHandTransform.rotation.eulerAngles.y, 0); // Horizontal rotation
                    platl.GetComponent<Renderer>().enabled = false; // Make the platform invisible
                }
            }
            else
            {
                if (platl != null)
                {
                    UnityEngine.Object.Destroy(platl);
                    platl = null;
                }
            }

            if (ControllerInputPoller.instance.rightGrab)
            {
                if (platr == null)
                {
                    platr = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    platr.transform.localScale = new Vector3(0.4f, 0.025f, 0.3f);
                    platr.transform.position = GorillaTagger.Instance.rightHandTransform.position + platformOffset; // Position exactly at the right hand
                    platr.transform.rotation = Quaternion.Euler(0, GorillaTagger.Instance.rightHandTransform.rotation.eulerAngles.y, 0); // Horizontal rotation
                    platr.GetComponent<Renderer>().enabled = false; // Make the platform invisible
                }
            }
            else
            {
                if (platr != null)
                {
                    UnityEngine.Object.Destroy(platr);
                    platr = null;
                }
            }
        }

        public static void SpeedTTTPig()
        {
            GorillaLocomotion.Player.Instance.jumpMultiplier = 1.7f;
            GorillaLocomotion.Player.Instance.maxJumpSpeed = 7.7f;
        }




        public static void CustomBoards()
        {
            GameObject.Find("motdtext").GetComponent<Text>().text = "<color=white> Hey! This Menu was created by @dynamicgamingofficial295 there are a LOT of mods on this menu and please go join the Discord" +
                "to get updates on the menu and my YouTube channel! </color>";
            GameObject.Find("COC Text").GetComponent<Text>().text = "<color=white>             Meanings                      " +



                " UND = UNDETECTABLE" +

                " Dectected = DETECTABLE" +

                " Dectected? = MAYBE DETECTED" +

                " LT = LEFT TRIGGER" +

                " RT = RIGHT TRIGGER" +

                " LG = LEFT GRIP" +

                " RG = RIGHT GRIP " +

                "I am not responsible for you getting banned, and if you do get banned report it in the Discord immediately" +

                "Have fun!";


            GameObject.Find("CodeOfConduct").GetComponent<Text>().text = "<color=white> Made by: Dynamic</color>";
            GameObject.Find("motd").GetComponent<Text>().text = "<color=white> Dynamic Mods </color>";
            GameObject.Find("WallScreenForest").GetComponent<Text>().text = "<color=yellow> Dynamic Mods has been successfully loaded, and is ready to be used. Click Y on left contoller to get" +
                "started.</color>";
            GameObject.Find("WallScreenCave").GetComponent<Text>().text = "<color=yellow> Dynamic Mods has been successfully loaded, and is ready to be used. Click Y on left contoller to get started" +
                " Use mods in Private to be safe! </color>";
            GameObject.Find("motdscreen").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("REMOVE board").GetComponent<Renderer>().material.color = Color.blue;
            GameObject.Find("wallmonitorforest").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("wallmonitorcave").GetComponent<Renderer>().material.color = Color.blue;
            GameObject.Find("wallmonitorcanyon").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("screen").GetComponent<Renderer>().material.color = Color.blue;
            GameObject.Find("wallmonitorcosmetics").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("wallmonitorskyjungle").GetComponent<Renderer>().material.color = Color.blue;
            GameObject.Find("monitor (1)").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("info page 2 (1)").GetComponent<Renderer>().material.color = Color.blue;
            GameObject.Find("stand (1)").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("wallmonitor - mountain").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("wallmonitor city back").GetComponent<Renderer>().material.color = Color.blue;
            GameObject.Find("screen (combined by EdMeshCombinerSceneProcessor)").GetComponent<Renderer>().material.color = Color.cyan;
            GameObject.Find("board (1)").GetComponent<Renderer>().material.color = Color.blue;

        }

        public static void Disconnect()
        {
            PhotonNetwork.Disconnect();
        }


        public static void TriggerDisconnectR()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                if (PhotonNetwork.InRoom == true)
                {
                    PhotonNetwork.Disconnect();
                }
                else
                {
                    NotifiLib.SendNotification("<color=red>{ERROR}</color> <color=purple>{YOU ARE NOT CONNECTED TO A ROOM}</color>");
                }
            }
        }


        public static void TriggerDisconnect()
        {
            if (PhotonNetwork.InRoom == true)
            {
                if (ControllerInputPoller.instance.rightControllerIndexTouch > 0.5f)
                {
                    PhotonNetwork.Disconnect();
                }
            }
            else
            {
                NotifiLib.SendNotification("ERROR {NOT CONNECTED TO A ROOM}");
            }
        }

        public static void HeadSpin()
        {
            RigShit.GetOwnVRRig().head.trackingRotationOffset.y += 15f;
        }

        public static void nuhuhheadspin()
        {
            RigShit.GetOwnVRRig().head.trackingRotationOffset.y = 0.0f;

        }
        public static void placeholder() { }
        public static bool inSettings = false;

        public static void Settings()
        {
            WristMenu.settingsbuttons[0].enabled = false;
            WristMenu.buttons[0].enabled = false;
            inSettings = !inSettings;
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }
        public static bool incool12 = false;
        public static void Cool12()
        {
            WristMenu.settingsbuttons[0].enabled = false;
            WristMenu.buttons[0].enabled = false;
            inSettings = !inSettings;
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
        }







        public static bool invisplat = false;
        public static bool stickyplatforms = false;
        public static GameObject funn;
        public static bool fpcc;

        public static void Platforms()
        {
            PlatformsThing(invisplat, stickyplatforms);
        }

        public static GameObject pointer;
        public static void fpc()
        {
            fpcc = true;
            if (GameObject.Find("Third Person Camera") != null)
            {
                funn = GameObject.Find("Third Person Camera");
                funn.SetActive(false);
            }
            if (GameObject.Find("CameraTablet(Clone)") != null)
            {
                funn = GameObject.Find("CameraTablet(Clone)");
                funn.SetActive(false);
            }
        }

        public static void fpcoff()
        {
            fpcc = false;
            if (funn != null)
            {
                funn.SetActive(true);
                funn = null;
            }
        }

        public static ButtonInfo GetButton(string name)
        {
            foreach (ButtonInfo buttons in WristMenu.buttons)
            {
                if (buttons.buttonText.Contains(name))
                {
                    return buttons;
                }
                if (buttons.buttonText == name)
                {
                    return buttons;
                }
            }
            return null;
        }

        public static bool inPlayers = false;





        public static void Save()
        {
            WristMenu.settingsbuttons[1].enabled = false;
            WristMenu.DestroyMenu();
            WristMenu.instance.Draw();
            List<String> list = new List<String>();
            foreach (ButtonInfo info in WristMenu.settingsbuttons)
            {
                if (info.enabled == true)
                {
                    list.Add(info.buttonText);
                }
            }
            System.IO.Directory.CreateDirectory("DynamicModsPrefs");
            System.IO.File.WriteAllLines("DynamicModsPrefs\\dynamicmodsSavedPrefs.txt", list);
        }

        public static void Load()
        {
            String[] thing = System.IO.File.ReadAllLines("DynamicModsPrefs\\dynamicmodsSavedPrefs.txt");
            foreach (String thing2 in thing)
            {
                foreach (ButtonInfo b in WristMenu.settingsbuttons)
                {
                    if (b.buttonText == thing2)
                    {
                        b.enabled = true;
                    }
                }
            }
        }


        static float smth496;

        public static void SilentAim()
        {
            if (smth496 < Time.time)
            {
                smth496 = Time.time + 0.05f;
                VRRig target = RigShit.GetRigFromPlayer(RigShit.GetRandomPlayer(false));
                if (target.mainSkin.material.name.Contains("orangealive") && GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("blue") || target.mainSkin.material.name.Contains("bluealive") && GorillaTagger.Instance.offlineVRRig.mainSkin.material.name.Contains("orange"))
                {
                    target = RigShit.GetRigFromPlayer(RigShit.GetRandomPlayer(false));
                }
                foreach (SlingshotProjectile proj in GameObject.Find("Environment Objects/PersistentObjects_Prefab/GlobalObjectPools").GetComponentsInChildren<SlingshotProjectile>())
                {
                    if (proj.projectileOwner == PhotonNetwork.LocalPlayer)
                    {
                        proj.gameObject.transform.position = target.transform.position;
                        flushmanually();
                    }
                }
            }
        }


        public static void flushmanually()
        {
            GorillaNot.instance.rpcErrorMax = int.MaxValue;
            GorillaNot.instance.rpcCallLimit = int.MaxValue;
            GorillaNot.instance.logErrorMax = int.MaxValue;
            PhotonNetwork.RemoveRPCs(PhotonNetwork.LocalPlayer);
            PhotonNetwork.OpCleanRpcBuffer(GorillaTagger.Instance.myVRRig);
            PhotonNetwork.RemoveBufferedRPCs(GorillaTagger.Instance.myVRRig.ViewID, null, null);
            PhotonNetwork.RemoveRPCsInGroup(int.MaxValue);
            PhotonNetwork.SendAllOutgoingCommands();
            GorillaNot.instance.OnPlayerLeftRoom(PhotonNetwork.LocalPlayer);
        }

        private static void PlatformsThing(bool invis, bool sticky)
        {
            colorKeysPlatformMonke[0].color = Color.clear;
            colorKeysPlatformMonke[0].time = 0f;
            colorKeysPlatformMonke[1].color = Color.cyan;
            colorKeysPlatformMonke[1].time = 0.3f;
            colorKeysPlatformMonke[2].color = Color.blue;
            colorKeysPlatformMonke[2].time = 0.6f;
            colorKeysPlatformMonke[3].color = Color.cyan;
            colorKeysPlatformMonke[3].time = 1f;
            bool inputr;
            bool inputl;
            inputr = WristMenu.gripDownR;
            inputl = WristMenu.gripDownL;
            if (inputr)
            {
                if (!once_right && jump_right_local == null)
                {
                    if (sticky)
                    {
                        jump_right_local = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    }
                    else
                    {
                        jump_right_local = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    }
                    jump_right_local.GetComponent<Renderer>().material.SetColor("_Color", Color.blue);
                    if (invis)
                    {
                        UnityEngine.Object.Destroy(jump_right_local.GetComponent<Renderer>());
                    }
                    jump_right_local.transform.localScale = scale;
                    jump_right_local.transform.position = new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                    jump_right_local.transform.rotation = GorillaLocomotion.Player.Instance.rightControllerTransform.rotation;
                    object[] eventContent = new object[2]
                    {
                    new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.rightControllerTransform.position,
                    GorillaLocomotion.Player.Instance.rightControllerTransform.rotation
                    };
                    RaiseEventOptions raiseEventOptions = new RaiseEventOptions
                    {
                        Receivers = ReceiverGroup.Others
                    };
                    PhotonNetwork.RaiseEvent(70, eventContent, raiseEventOptions, SendOptions.SendReliable);
                    once_right = true;
                    once_right_false = false;
                    ColorChanger colorChanger = jump_right_local.AddComponent<ColorChanger>();
                    Gradient gradient = new Gradient();
                    gradient.colorKeys = colorKeysPlatformMonke;
                    colorChanger.colors = gradient;
                    colorChanger.Start();
                }
            }
            else if (!once_right_false && jump_right_local != null)
            {
                UnityEngine.Object.Destroy(jump_right_local);
                jump_right_local = null;
                once_right = false;
                once_right_false = true;
                RaiseEventOptions raiseEventOptions2 = new RaiseEventOptions
                {
                    Receivers = ReceiverGroup.Others
                };
                PhotonNetwork.RaiseEvent(72, null, raiseEventOptions2, SendOptions.SendReliable);
            }
            if (inputl)
            {
                if (!once_left && jump_left_local == null)
                {
                    if (sticky)
                    {
                        jump_left_local = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    }
                    else
                    {
                        jump_left_local = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    }
                    jump_left_local.GetComponent<Renderer>().material.SetColor("_Color", Color.cyan);
                    if (invis)
                    {
                        UnityEngine.Object.Destroy(jump_left_local.GetComponent<Renderer>());
                    }
                    jump_left_local.transform.localScale = scale;
                    jump_left_local.transform.position = new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.leftControllerTransform.position;
                    jump_left_local.transform.rotation = GorillaLocomotion.Player.Instance.leftControllerTransform.rotation;
                    object[] eventContent2 = new object[2]
                    {
                    new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.leftControllerTransform.position,
                    GorillaLocomotion.Player.Instance.leftControllerTransform.rotation
                    };
                    RaiseEventOptions raiseEventOptions3 = new RaiseEventOptions
                    {
                        Receivers = ReceiverGroup.Others
                    };
                    PhotonNetwork.RaiseEvent(69, eventContent2, raiseEventOptions3, SendOptions.SendReliable);
                    once_left = true;
                    once_left_false = false;
                    ColorChanger colorChanger2 = jump_left_local.AddComponent<ColorChanger>();
                    Gradient gradient2 = new Gradient();
                    gradient2.colorKeys = colorKeysPlatformMonke;
                    colorChanger2.colors = gradient2;
                    colorChanger2.Start();
                }
            }
            else if (!once_left_false && jump_left_local != null)
            {
                UnityEngine.Object.Destroy(jump_left_local);
                jump_left_local = null;
                once_left = false;
                once_left_false = true;
                RaiseEventOptions raiseEventOptions4 = new RaiseEventOptions
                {
                    Receivers = ReceiverGroup.Others
                };
                PhotonNetwork.RaiseEvent(71, null, raiseEventOptions4, SendOptions.SendReliable);
            }
            if (!PhotonNetwork.InRoom)
            {
                for (int i = 0; i < jump_right_network.Length; i++)
                {
                    UnityEngine.Object.Destroy(jump_right_network[i]);
                }
                for (int j = 0; j < jump_left_network.Length; j++)
                {
                    UnityEngine.Object.Destroy(jump_left_network[j]);
                }
            }
        }

        private static Vector3 scale = new Vector3(0.0125f, 0.28f, 0.3825f);

        private static bool once_left;

        private static bool once_right;

        private static bool once_left_false;

        private static bool once_right_false;

        private static bool once_networking;

        private static GameObject[] jump_left_network = new GameObject[9999];

        private static GameObject[] jump_right_network = new GameObject[9999];

        private static GameObject jump_left_local = null;

        private static GameObject jump_right_local = null;

        private static GradientColorKey[] colorKeysPlatformMonke = new GradientColorKey[4];

        private static Vector3? checkpointPos;


        public static void Beacons()
        {
            if (PhotonNetwork.CurrentRoom != null)
            {
                foreach (Photon.Realtime.Player player3 in PhotonNetwork.PlayerListOthers)
                {
                    PhotonView photonView3 = GorillaGameManager.instance.FindVRRigForPlayer(player3);
                    VRRig vrrig = GorillaGameManager.instance.FindPlayerVRRig(player3);
                    if (!vrrig.isOfflineVRRig && !vrrig.isMyPlayer && !photonView3.IsMine)
                    {
                        GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Cylinder);
                        UnityEngine.Object.Destroy(gameObject.GetComponent<BoxCollider>());
                        UnityEngine.Object.Destroy(gameObject.GetComponent<Rigidbody>());
                        UnityEngine.Object.Destroy(gameObject.GetComponent<Collider>());
                        gameObject.GetComponent<MeshRenderer>().material.SetColor("_Color", Color.green);
                        gameObject.transform.rotation = Quaternion.identity;
                        gameObject.transform.localScale = new Vector3(0.04f, 200f, 0.04f);
                        gameObject.transform.position = vrrig.transform.position;
                        gameObject.GetComponent<MeshRenderer>().material = vrrig.mainSkin.material;
                        UnityEngine.Object.Destroy(gameObject, Time.deltaTime);
                    }
                }
            }

        }


        public static void GrabRig()
        {

            if (ControllerInputPoller.instance.rightGrab)
            {
                GorillaTagger.Instance.offlineVRRig.enabled = false;
                GorillaTagger.Instance.offlineVRRig.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                GorillaTagger.Instance.myVRRig.transform.position = GorillaTagger.Instance.rightHandTransform.position;
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
            if (ControllerInputPoller.TriggerFloat(XRNode.RightHand) == 1f)
            {
                GorillaTagger.Instance.offlineVRRig.enabled = false;
                GorillaTagger.Instance.offlineVRRig.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                GorillaTagger.Instance.myVRRig.transform.position = GorillaTagger.Instance.leftHandTransform.position;
            }
            else
            {
                GorillaTagger.Instance.offlineVRRig.enabled = true;
            }
            RigPatch(GorillaTagger.Instance.offlineVRRig);
        }

        private static void RigPatch(VRRig offlineVRRig)
        {
            throw new NotImplementedException();
        }


        public static void RigGun()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                Physics.Raycast(GorillaTagger.Instance.rightHandTransform.position, GorillaTagger.Instance.rightHandTransform.forward, out var Ray);

                GameObject pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                pointer.GetComponent<Renderer>().material.color = new Color32(50, 50, 50, 255);
                pointer.transform.localScale = new Vector3(0.15f, 0.15f, 0.15f);
                pointer.transform.position = Ray.point;
                UnityEngine.Object.Destroy(pointer.GetComponent<BoxCollider>());
                UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
                UnityEngine.Object.Destroy(pointer.GetComponent<Collider>());
                UnityEngine.Object.Destroy(pointer, Time.deltaTime);
                GorillaTagger.Instance.offlineVRRig.enabled = false;
                if (ControllerInputPoller.instance.leftGrab)
                {
                    GorillaTagger.Instance.offlineVRRig.enabled = false;
                    GorillaTagger.Instance.offlineVRRig.transform.position = pointer.transform.position + new Vector3(0f, 0.25f, 0f);
                    GorillaTagger.Instance.myVRRig.transform.position = pointer.transform.position + new Vector3(0f, 0.25f, 0f);
                }
                else
                {
                    GorillaTagger.Instance.offlineVRRig.enabled = true;
                }

            }

        }

        public static bool casual = false;
        public static bool fected = false;
        public static bool ifDisabled = true;
        private static bool isNametagEnabled;

        public static void ChamsRemastered()
        {
            ifDisabled = false;
            float x = 0f; float y = 0f; float z = 0f; float scale = 1.85f;
            foreach (VRRig Players in GorillaParent.instance.vrrigs)
            {
                if (Players.mainSkin.material.name.Contains("fected"))
                {
                    fected = true;
                }
                else
                {
                    casual = true;
                }

                if (!ifDisabled)
                {
                    if (fected)
                    {
                        x = scale; y = scale; z = scale;

                        Vector3 Position = GorillaTagger.Instance.bodyCollider.transform.position;

                        GameObject bodySphere = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                        GameObject lineFollow = new GameObject("Line");
                        LineRenderer lineUser = lineFollow.AddComponent<LineRenderer>();

                        UnityEngine.Color sphereColor = new Color32(0, 255, 0, 125);
                        UnityEngine.Color lineColor = new Color32(0, 255, 0, 125);
                        UnityEngine.Color lineColor1 = new Color32(0, 255, 0, 125);

                        lineUser.startColor = lineColor; lineUser.endColor = lineColor1;
                        lineUser.startWidth = 0.0225f; lineUser.endWidth = 0.0225f;
                        bodySphere.transform.localScale = new Vector3(x, y, z);

                        lineUser.useWorldSpace = true;

                        bodySphere.transform.position = Players.transform.position;
                        lineUser.positionCount = 2;
                        lineUser.SetPosition(0, Position);
                        lineUser.SetPosition(1, bodySphere.transform.position);

                        bodySphere.GetComponent<Renderer>().material.shader = Shader.Find("GUI/Text Shader");
                        lineUser.material.shader = Shader.Find("GUI/Text Shader");

                        UnityEngine.Object.Destroy(bodySphere.GetComponent<BoxCollider>());
                        UnityEngine.Object.Destroy(bodySphere.GetComponent<Collider>());
                        UnityEngine.Object.Destroy(bodySphere.GetComponent<Rigidbody>());

                        UnityEngine.Object.Destroy(bodySphere, Time.deltaTime);
                        UnityEngine.Object.Destroy(lineFollow, Time.deltaTime);
                    }
                    else { x = 0f; y = 0f; z = 0f; }

                    if (casual)
                    {
                        x = scale; y = scale; z = scale;

                        Vector3 Position = GorillaTagger.Instance.bodyCollider.transform.position;

                        GameObject bodySphere = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                        GameObject lineFollow = new GameObject("Line");
                        LineRenderer lineUser = lineFollow.AddComponent<LineRenderer>();

                        UnityEngine.Color sphereColor = new Color32(0, 255, 0, 125);
                        UnityEngine.Color lineColor = new Color32(0, 255, 0, 125);
                        UnityEngine.Color lineColor1 = new Color32(0, 255, 0, 125);

                        lineUser.startColor = lineColor; lineUser.endColor = lineColor1;
                        lineUser.startWidth = 0.0225f; lineUser.endWidth = 0.0225f;
                        bodySphere.transform.localScale = new Vector3(x, y, z);

                        lineUser.useWorldSpace = true;

                        bodySphere.transform.position = Players.transform.position;
                        lineUser.positionCount = 2;
                        lineUser.SetPosition(0, Position);
                        lineUser.SetPosition(1, bodySphere.transform.position);

                        bodySphere.GetComponent<Renderer>().material.shader = Shader.Find("GUI/Text Shader");
                        lineUser.material.shader = Shader.Find("GUI/Text Shader");

                        UnityEngine.Object.Destroy(bodySphere.GetComponent<BoxCollider>());
                        UnityEngine.Object.Destroy(bodySphere.GetComponent<Collider>());
                        UnityEngine.Object.Destroy(bodySphere.GetComponent<Rigidbody>());

                        UnityEngine.Object.Destroy(bodySphere, Time.deltaTime);
                        UnityEngine.Object.Destroy(lineFollow, Time.deltaTime);
                    }
                    else { x = 0f; y = 0f; z = 0f; }
                }

            }
        }

        public static void disableChams()
        {
            ifDisabled = true;
            casual = false; fected = false;
        }




        public static void Makeblue()
        {
            foreach (VRRig vrrig in (VRRig[])GameObject.FindObjectsOfType(typeof(VRRig)))
            {
                vrrig.mainSkin.material.color = Color.blue;
            }
        }

        public static void SizeChanger()
        {
            if (ControllerInputPoller.instance.leftGrab)
            {
                GorillaLocomotion.Player.Instance.scale -= 0.1f;
            }
            if (ControllerInputPoller.instance.rightGrab)
            {
                GorillaLocomotion.Player.Instance.scale += 0.1f;
            }
        }


        public static void BugBox()
        {
            GameObject gameObject = GameObject.CreatePrimitive(PrimitiveType.Cube);
            GameObject gameObject2 = GameObject.Find("Floating Bug Holdable");
            gameObject.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
            gameObject.transform.position = gameObject2.transform.position;
            gameObject.GetComponent<Renderer>().material.color = Color.green;
            gameObject.GetComponent<Collider>().enabled = false;
            UnityEngine.Object.Destroy(gameObject, Time.deltaTime);
        }




        public static void Processskeletonesp()
        {
            foreach (VRRig vrrig in UnityEngine.Object.FindObjectsOfType<VRRig>())
            {
                foreach (Transform transform in vrrig.GetComponentsInChildren<Transform>())
                {
                    bool flag = transform.name == "head";
                    bool flag2 = flag;
                    bool flag3 = flag2;
                    bool flag4 = flag3;
                    bool flag5 = flag4;
                    if (flag5)
                    {
                        bool flag6 = transform.gameObject.GetComponent<LineRenderer>() == null;
                        bool flag7 = flag6;
                        bool flag8 = flag7;
                        bool flag9 = flag8;
                        bool flag10 = flag9;
                        if (flag10)
                        {
                            transform.gameObject.AddComponent<LineRenderer>();
                            transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                            transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                            transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                            transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                            transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                        }
                        transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, new Vector3(transform.gameObject.transform.position.x, transform.gameObject.transform.position.y + 0.1f, transform.gameObject.transform.position.z));
                        transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, new Vector3(transform.gameObject.transform.position.x, transform.gameObject.transform.position.y - 0.37f, transform.gameObject.transform.position.z));
                    }
                    bool flag11 = transform.name == "shoulder.R";
                    bool flag12 = flag11;
                    bool flag13 = flag12;
                    bool flag14 = flag13;
                    bool flag15 = flag14;
                    if (flag15)
                    {
                        foreach (object obj in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform2 = (Transform)obj;
                            bool flag16 = transform2.name == "upper_arm.R";
                            bool flag17 = flag16;
                            bool flag18 = flag17;
                            bool flag19 = flag18;
                            bool flag20 = flag19;
                            if (flag20)
                            {
                                bool flag21 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag22 = flag21;
                                bool flag23 = flag22;
                                bool flag24 = flag23;
                                bool flag25 = flag24;
                                if (flag25)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform2.transform.position);
                            }
                        }
                    }
                    bool flag26 = transform.name == "upper_arm.R";
                    bool flag27 = flag26;
                    bool flag28 = flag27;
                    bool flag29 = flag28;
                    bool flag30 = flag29;
                    if (flag30)
                    {
                        foreach (object obj2 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform3 = (Transform)obj2;
                            bool flag31 = transform3.name == "forearm.R";
                            bool flag32 = flag31;
                            bool flag33 = flag32;
                            bool flag34 = flag33;
                            bool flag35 = flag34;
                            if (flag35)
                            {
                                bool flag36 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag37 = flag36;
                                bool flag38 = flag37;
                                bool flag39 = flag38;
                                bool flag40 = flag39;
                                if (flag40)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform3.transform.position);
                            }
                        }
                    }
                    bool flag41 = transform.name == "forearm.R";
                    bool flag42 = flag41;
                    bool flag43 = flag42;
                    bool flag44 = flag43;
                    bool flag45 = flag44;
                    if (flag45)
                    {
                        foreach (object obj3 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform4 = (Transform)obj3;
                            bool flag46 = transform4.name == "hand.R";
                            bool flag47 = flag46;
                            bool flag48 = flag47;
                            bool flag49 = flag48;
                            bool flag50 = flag49;
                            if (flag50)
                            {
                                bool flag51 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag52 = flag51;
                                bool flag53 = flag52;
                                bool flag54 = flag53;
                                bool flag55 = flag54;
                                if (flag55)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform4.transform.position);
                            }
                        }
                    }
                    bool flag56 = transform.name == "hand.R";
                    bool flag57 = flag56;
                    bool flag58 = flag57;
                    bool flag59 = flag58;
                    bool flag60 = flag59;
                    if (flag60)
                    {
                        foreach (object obj4 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform5 = (Transform)obj4;
                            bool flag61 = transform5.name == "palm.01.R";
                            bool flag62 = flag61;
                            bool flag63 = flag62;
                            bool flag64 = flag63;
                            bool flag65 = flag64;
                            if (flag65)
                            {
                                foreach (object obj5 in transform5.GetComponentInChildren<Transform>())
                                {
                                    Transform transform6 = (Transform)obj5;
                                    bool flag66 = transform6.name == "f_index.01.R";
                                    bool flag67 = flag66;
                                    bool flag68 = flag67;
                                    bool flag69 = flag68;
                                    bool flag70 = flag69;
                                    if (flag70)
                                    {
                                        bool flag71 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                        bool flag72 = flag71;
                                        bool flag73 = flag72;
                                        bool flag74 = flag73;
                                        bool flag75 = flag74;
                                        if (flag75)
                                        {
                                            transform.gameObject.AddComponent<LineRenderer>();
                                            transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                            transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                            transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                            transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                            transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                        }
                                        transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                        transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform6.transform.position);
                                    }
                                }
                            }
                        }
                    }
                    bool flag76 = transform.name == "palm.02.R";
                    bool flag77 = flag76;
                    bool flag78 = flag77;
                    bool flag79 = flag78;
                    bool flag80 = flag79;
                    if (flag80)
                    {
                        foreach (object obj6 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform7 = (Transform)obj6;
                            bool flag81 = transform7.name == "f_middle.01.R";
                            bool flag82 = flag81;
                            bool flag83 = flag82;
                            bool flag84 = flag83;
                            bool flag85 = flag84;
                            if (flag85)
                            {
                                bool flag86 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag87 = flag86;
                                bool flag88 = flag87;
                                bool flag89 = flag88;
                                bool flag90 = flag89;
                                if (flag90)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform7.transform.position);
                            }
                        }
                    }
                    bool flag91 = transform.name == "f_middle.01.R";
                    bool flag92 = flag91;
                    bool flag93 = flag92;
                    bool flag94 = flag93;
                    bool flag95 = flag94;
                    if (flag95)
                    {
                        foreach (object obj7 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform8 = (Transform)obj7;
                            bool flag96 = transform8.name == "f_middle.02.R";
                            bool flag97 = flag96;
                            bool flag98 = flag97;
                            bool flag99 = flag98;
                            bool flag100 = flag99;
                            if (flag100)
                            {
                                bool flag101 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag102 = flag101;
                                bool flag103 = flag102;
                                bool flag104 = flag103;
                                bool flag105 = flag104;
                                if (flag105)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform8.transform.position);
                            }
                        }
                    }
                    bool flag106 = transform.name == "f_middle.02.R";
                    bool flag107 = flag106;
                    bool flag108 = flag107;
                    bool flag109 = flag108;
                    bool flag110 = flag109;
                    if (flag110)
                    {
                        foreach (object obj8 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform9 = (Transform)obj8;
                            bool flag111 = transform9.name == "f_middle.03.R";
                            bool flag112 = flag111;
                            bool flag113 = flag112;
                            bool flag114 = flag113;
                            bool flag115 = flag114;
                            if (flag115)
                            {
                                bool flag116 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag117 = flag116;
                                bool flag118 = flag117;
                                bool flag119 = flag118;
                                bool flag120 = flag119;
                                if (flag120)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform9.transform.position);
                            }
                        }
                    }
                    bool flag121 = transform.name == "f_middle.03.R";
                    bool flag122 = flag121;
                    bool flag123 = flag122;
                    bool flag124 = flag123;
                    bool flag125 = flag124;
                    if (flag125)
                    {
                        foreach (object obj9 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform10 = (Transform)obj9;
                            bool flag126 = transform10.name == "f_middle.03.R_end";
                            bool flag127 = flag126;
                            bool flag128 = flag127;
                            bool flag129 = flag128;
                            bool flag130 = flag129;
                            if (flag130)
                            {
                                bool flag131 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag132 = flag131;
                                bool flag133 = flag132;
                                bool flag134 = flag133;
                                bool flag135 = flag134;
                                if (flag135)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform10.transform.position);
                            }
                        }
                    }
                    bool flag136 = transform.name == "palm.01.R";
                    bool flag137 = flag136;
                    bool flag138 = flag137;
                    bool flag139 = flag138;
                    bool flag140 = flag139;
                    if (flag140)
                    {
                        foreach (object obj10 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform11 = (Transform)obj10;
                            bool flag141 = transform11.name == "f_index.01.R";
                            bool flag142 = flag141;
                            bool flag143 = flag142;
                            bool flag144 = flag143;
                            bool flag145 = flag144;
                            if (flag145)
                            {
                                bool flag146 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag147 = flag146;
                                bool flag148 = flag147;
                                bool flag149 = flag148;
                                bool flag150 = flag149;
                                if (flag150)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform11.transform.position);
                            }
                        }
                    }
                    bool flag151 = transform.name == "f_index.01.R";
                    bool flag152 = flag151;
                    bool flag153 = flag152;
                    bool flag154 = flag153;
                    bool flag155 = flag154;
                    if (flag155)
                    {
                        foreach (object obj11 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform12 = (Transform)obj11;
                            bool flag156 = transform12.name == "f_index.02.R";
                            bool flag157 = flag156;
                            bool flag158 = flag157;
                            bool flag159 = flag158;
                            bool flag160 = flag159;
                            if (flag160)
                            {
                                bool flag161 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag162 = flag161;
                                bool flag163 = flag162;
                                bool flag164 = flag163;
                                bool flag165 = flag164;
                                if (flag165)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform12.transform.position);
                            }
                        }
                    }
                    bool flag166 = transform.name == "f_index.02.R";
                    bool flag167 = flag166;
                    bool flag168 = flag167;
                    bool flag169 = flag168;
                    bool flag170 = flag169;
                    if (flag170)
                    {
                        foreach (object obj12 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform13 = (Transform)obj12;
                            bool flag171 = transform13.name == "f_index.03.R";
                            bool flag172 = flag171;
                            bool flag173 = flag172;
                            bool flag174 = flag173;
                            bool flag175 = flag174;
                            if (flag175)
                            {
                                bool flag176 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag177 = flag176;
                                bool flag178 = flag177;
                                bool flag179 = flag178;
                                bool flag180 = flag179;
                                if (flag180)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform13.transform.position);
                            }
                        }
                    }
                    bool flag181 = transform.name == "f_index.03.R";
                    bool flag182 = flag181;
                    bool flag183 = flag182;
                    bool flag184 = flag183;
                    bool flag185 = flag184;
                    if (flag185)
                    {
                        foreach (object obj13 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform14 = (Transform)obj13;
                            bool flag186 = transform14.name == "f_index.03.R_end";
                            bool flag187 = flag186;
                            bool flag188 = flag187;
                            bool flag189 = flag188;
                            bool flag190 = flag189;
                            if (flag190)
                            {
                                bool flag191 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag192 = flag191;
                                bool flag193 = flag192;
                                bool flag194 = flag193;
                                bool flag195 = flag194;
                                if (flag195)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform14.transform.position);
                            }
                        }
                    }
                    bool flag196 = transform.name == "shoulder.L";
                    bool flag197 = flag196;
                    bool flag198 = flag197;
                    bool flag199 = flag198;
                    bool flag200 = flag199;
                    if (flag200)
                    {
                        foreach (object obj14 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform15 = (Transform)obj14;
                            bool flag201 = transform15.name == "upper_arm.L";
                            bool flag202 = flag201;
                            bool flag203 = flag202;
                            bool flag204 = flag203;
                            bool flag205 = flag204;
                            if (flag205)
                            {
                                bool flag206 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag207 = flag206;
                                bool flag208 = flag207;
                                bool flag209 = flag208;
                                bool flag210 = flag209;
                                if (flag210)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform15.transform.position);
                            }
                        }
                    }
                    bool flag211 = transform.name == "upper_arm.L";
                    bool flag212 = flag211;
                    bool flag213 = flag212;
                    bool flag214 = flag213;
                    bool flag215 = flag214;
                    if (flag215)
                    {
                        foreach (object obj15 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform16 = (Transform)obj15;
                            bool flag216 = transform16.name == "forearm.L";
                            bool flag217 = flag216;
                            bool flag218 = flag217;
                            bool flag219 = flag218;
                            bool flag220 = flag219;
                            if (flag220)
                            {
                                bool flag221 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag222 = flag221;
                                bool flag223 = flag222;
                                bool flag224 = flag223;
                                bool flag225 = flag224;
                                if (flag225)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform16.transform.position);
                            }
                        }
                    }
                    bool flag226 = transform.name == "forearm.L";
                    bool flag227 = flag226;
                    bool flag228 = flag227;
                    bool flag229 = flag228;
                    bool flag230 = flag229;
                    if (flag230)
                    {
                        foreach (object obj16 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform17 = (Transform)obj16;
                            bool flag231 = transform17.name == "hand.L";
                            bool flag232 = flag231;
                            bool flag233 = flag232;
                            bool flag234 = flag233;
                            bool flag235 = flag234;
                            if (flag235)
                            {
                                bool flag236 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag237 = flag236;
                                bool flag238 = flag237;
                                bool flag239 = flag238;
                                bool flag240 = flag239;
                                if (flag240)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform17.transform.position);
                            }
                        }
                    }
                    bool flag241 = transform.name == "hand.L";
                    bool flag242 = flag241;
                    bool flag243 = flag242;
                    bool flag244 = flag243;
                    bool flag245 = flag244;
                    if (flag245)
                    {
                        foreach (object obj17 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform18 = (Transform)obj17;
                            bool flag246 = transform18.name == "palm.01.L";
                            bool flag247 = flag246;
                            bool flag248 = flag247;
                            bool flag249 = flag248;
                            bool flag250 = flag249;
                            if (flag250)
                            {
                                foreach (object obj18 in transform18.GetComponentInChildren<Transform>())
                                {
                                    Transform transform19 = (Transform)obj18;
                                    bool flag251 = transform19.name == "f_index.01.L";
                                    bool flag252 = flag251;
                                    bool flag253 = flag252;
                                    bool flag254 = flag253;
                                    bool flag255 = flag254;
                                    if (flag255)
                                    {
                                        bool flag256 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                        bool flag257 = flag256;
                                        bool flag258 = flag257;
                                        bool flag259 = flag258;
                                        bool flag260 = flag259;
                                        if (flag260)
                                        {
                                            transform.gameObject.AddComponent<LineRenderer>();
                                            transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                            transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                            transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                            transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                            transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                        }
                                        transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                        transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform19.transform.position);
                                    }
                                }
                            }
                        }
                    }
                    bool flag261 = transform.name == "palm.02.L";
                    bool flag262 = flag261;
                    bool flag263 = flag262;
                    bool flag264 = flag263;
                    bool flag265 = flag264;
                    if (flag265)
                    {
                        foreach (object obj19 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform20 = (Transform)obj19;
                            bool flag266 = transform20.name == "f_middle.01.L";
                            bool flag267 = flag266;
                            bool flag268 = flag267;
                            bool flag269 = flag268;
                            bool flag270 = flag269;
                            if (flag270)
                            {
                                bool flag271 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag272 = flag271;
                                bool flag273 = flag272;
                                bool flag274 = flag273;
                                bool flag275 = flag274;
                                if (flag275)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform20.transform.position);
                            }
                        }
                    }
                    bool flag276 = transform.name == "f_middle.01.L";
                    bool flag277 = flag276;
                    bool flag278 = flag277;
                    bool flag279 = flag278;
                    bool flag280 = flag279;
                    if (flag280)
                    {
                        foreach (object obj20 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform21 = (Transform)obj20;
                            bool flag281 = transform21.name == "f_middle.02.L";
                            bool flag282 = flag281;
                            bool flag283 = flag282;
                            bool flag284 = flag283;
                            bool flag285 = flag284;
                            if (flag285)
                            {
                                bool flag286 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag287 = flag286;
                                bool flag288 = flag287;
                                bool flag289 = flag288;
                                bool flag290 = flag289;
                                if (flag290)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform21.transform.position);
                            }
                        }
                    }
                    bool flag291 = transform.name == "f_middle.02.L";
                    bool flag292 = flag291;
                    bool flag293 = flag292;
                    bool flag294 = flag293;
                    bool flag295 = flag294;
                    if (flag295)
                    {
                        foreach (object obj21 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform22 = (Transform)obj21;
                            bool flag296 = transform22.name == "f_middle.03.L";
                            bool flag297 = flag296;
                            bool flag298 = flag297;
                            bool flag299 = flag298;
                            bool flag300 = flag299;
                            if (flag300)
                            {
                                bool flag301 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag302 = flag301;
                                bool flag303 = flag302;
                                bool flag304 = flag303;
                                bool flag305 = flag304;
                                if (flag305)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform22.transform.position);
                            }
                        }
                    }
                    bool flag306 = transform.name == "f_middle.03.L";
                    bool flag307 = flag306;
                    bool flag308 = flag307;
                    bool flag309 = flag308;
                    bool flag310 = flag309;
                    if (flag310)
                    {
                        foreach (object obj22 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform23 = (Transform)obj22;
                            bool flag311 = transform23.name == "f_middle.03.L_end";
                            bool flag312 = flag311;
                            bool flag313 = flag312;
                            bool flag314 = flag313;
                            bool flag315 = flag314;
                            if (flag315)
                            {
                                bool flag316 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag317 = flag316;
                                bool flag318 = flag317;
                                bool flag319 = flag318;
                                bool flag320 = flag319;
                                if (flag320)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform23.transform.position);
                            }
                        }
                    }
                    bool flag321 = transform.name == "palm.01.L";
                    bool flag322 = flag321;
                    bool flag323 = flag322;
                    bool flag324 = flag323;
                    bool flag325 = flag324;
                    if (flag325)
                    {
                        foreach (object obj23 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform24 = (Transform)obj23;
                            bool flag326 = transform24.name == "f_index.01.L";
                            bool flag327 = flag326;
                            bool flag328 = flag327;
                            bool flag329 = flag328;
                            bool flag330 = flag329;
                            if (flag330)
                            {
                                bool flag331 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag332 = flag331;
                                bool flag333 = flag332;
                                bool flag334 = flag333;
                                bool flag335 = flag334;
                                if (flag335)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform24.transform.position);
                            }
                        }
                    }
                    bool flag336 = transform.name == "f_index.01.L";
                    bool flag337 = flag336;
                    bool flag338 = flag337;
                    bool flag339 = flag338;
                    bool flag340 = flag339;
                    if (flag340)
                    {
                        foreach (object obj24 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform25 = (Transform)obj24;
                            bool flag341 = transform25.name == "f_index.02.L";
                            bool flag342 = flag341;
                            bool flag343 = flag342;
                            bool flag344 = flag343;
                            bool flag345 = flag344;
                            if (flag345)
                            {
                                bool flag346 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag347 = flag346;
                                bool flag348 = flag347;
                                bool flag349 = flag348;
                                bool flag350 = flag349;
                                if (flag350)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform25.transform.position);
                            }
                        }
                    }
                    bool flag351 = transform.name == "f_index.02.L";
                    bool flag352 = flag351;
                    bool flag353 = flag352;
                    bool flag354 = flag353;
                    bool flag355 = flag354;
                    if (flag355)
                    {
                        foreach (object obj25 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform26 = (Transform)obj25;
                            bool flag356 = transform26.name == "f_index.03.L";
                            bool flag357 = flag356;
                            bool flag358 = flag357;
                            bool flag359 = flag358;
                            bool flag360 = flag359;
                            if (flag360)
                            {
                                bool flag361 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag362 = flag361;
                                bool flag363 = flag362;
                                bool flag364 = flag363;
                                bool flag365 = flag364;
                                if (flag365)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.blue;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform26.transform.position);
                            }
                        }
                    }
                    bool flag366 = transform.name == "f_index.03.L";
                    bool flag367 = flag366;
                    bool flag368 = flag367;
                    bool flag369 = flag368;
                    bool flag370 = flag369;
                    if (flag370)
                    {
                        foreach (object obj26 in transform.GetComponentInChildren<Transform>())
                        {
                            Transform transform27 = (Transform)obj26;
                            bool flag371 = transform27.name == "f_index.03.L_end";
                            bool flag372 = flag371;
                            bool flag373 = flag372;
                            bool flag374 = flag373;
                            bool flag375 = flag374;
                            if (flag375)
                            {
                                bool flag376 = transform.gameObject.GetComponent<LineRenderer>() == null;
                                bool flag377 = flag376;
                                bool flag378 = flag377;
                                bool flag379 = flag378;
                                bool flag380 = flag379;
                                if (flag380)
                                {
                                    transform.gameObject.AddComponent<LineRenderer>();
                                    transform.gameObject.GetComponent<LineRenderer>().startWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().endWidth = 0.01f;
                                    transform.gameObject.GetComponent<LineRenderer>().startColor = Color.red;
                                    transform.gameObject.GetComponent<LineRenderer>().endColor = Color.green;
                                    transform.gameObject.GetComponent<LineRenderer>().material.shader = Shader.Find("GUI/Text Shader");
                                }
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(0, transform.gameObject.transform.position);
                                transform.gameObject.GetComponent<LineRenderer>().SetPosition(1, transform27.transform.position);
                            }
                        }
                    }
                }
            }
        }










        public static void EnableGiveAllFingerPainter() //made by satis or 5ln7 
        {
            {
                foreach (VRRig vrrig in GorillaParent.instance.vrrigs)
                {
                    bool flag = vrrig != GorillaTagger.Instance.offlineVRRig;
                    if (flag)
                    {
                        GameObject.Find("Player Objects/Local VRRig/Local Gorilla Player/rig/body/2023_04DungeonV2 Body/LBADE.").SetActive(true);
                    }
                }




            }
        }

        public static void BugGunMod()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position, -GorillaLocomotion.Player.Instance.rightControllerTransform.up, out var hitInfo);
                pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                pointer.transform.localScale = new Vector3(0.2f, 0.2f, 0.2f);
                pointer.GetComponent<Renderer>().material.color = new Color32(255, 0, 0, 1);
                pointer.transform.position = hitInfo.point;
                GameObject.Destroy(pointer.GetComponent<BoxCollider>());
                GameObject.Destroy(pointer.GetComponent<Rigidbody>());
                GameObject.Destroy(pointer.GetComponent<Collider>());
                if (ControllerInputPoller.instance.rightControllerIndexFloat >= 0.3f)
                {
                    GameObject.Find("Floating Bug Holdable").transform.position = pointer.transform.position;
                }
            }
            if (pointer != null)
            {
                GameObject.Destroy(pointer, Time.deltaTime);
            }
        }

        public static void RightTriggerFly()
        {
            if (ControllerInputPoller.instance.rightControllerIndexFloat > 0.4f)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 25;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }
        public static void LeftTriggerFly()
        {
            if (ControllerInputPoller.instance.leftControllerIndexFloat > 0.4f)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 25;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }
        public static void RightGripFly()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 15f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }
        public static void LeftGripFly()
        {
            if (ControllerInputPoller.instance.leftGrab)
            {
                GorillaLocomotion.Player.Instance.transform.position += GorillaLocomotion.Player.Instance.headCollider.transform.forward * Time.deltaTime * 15f;
                GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
            }
        }


        public static void NameSpoofMod()
        {
            string[] array = new string[]
            {
                "SHINYROXX",
                "XADER",
                "XAVIR",
                "HOP3",
                "K8",
                "DASIY02",
                "GORILLA7821",
                "FUN",
                "JM3NCURLY",
                "FORTNITEKID",
                "MATT",
                "DOUGH",
                "GRIMACE",
                "K9",
                "XAS",
                "FSRFEWS",
                "SUN",
                "LUNAR",
                "S1LLY",
                "FUNNYMONKEY",
                "OHIO",
                "YURX",
                "KIRMIT",
                "DYNAMICONTOP",
                "BL0CKED",
                "PR0TECTED",
                "ELLIOT",
                "E11IOT",
                "DYNAMIC",
            };

            int num = new System.Random().Next(array.Length);
            string newName = array[num];

            // Update the UI element directly to display the new name
            UpdatePlayerNameUI(newName);
        }

        private static void UpdatePlayerNameUI(string newName)
        {
            // Find the UI Text element responsible for displaying the player's name
            GameObject playerNameTextObject = GameObject.Find("PlayerNameText");
            if (playerNameTextObject != null)
            {
                Text playerNameText = playerNameTextObject.GetComponent<Text>();
                if (playerNameText != null)
                {
                    // Update the text to display the new name
                    playerNameText.text = newName;
                }
                else
                {

                }
            }
            else
            {

            }
        }


        public static void PlatformsThingStick(bool invis, bool sticky)
        {
            colorKeysPlatformMonke[0].color = Color.clear;
            colorKeysPlatformMonke[0].time = 0f;
            colorKeysPlatformMonke[1].color = Color.cyan;
            colorKeysPlatformMonke[1].time = 0.3f;
            colorKeysPlatformMonke[2].color = Color.blue;
            colorKeysPlatformMonke[2].time = 0.6f;
            colorKeysPlatformMonke[3].color = Color.cyan;
            colorKeysPlatformMonke[3].time = 1f;
            bool inputr;
            bool inputl;
            inputr = WristMenu.gripDownR;
            inputl = WristMenu.gripDownL;
            if (inputr)
            {
                if (!once_right && jump_right_local == null)
                {
                    if (sticky)
                    {
                        jump_right_local = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    }
                    else
                    {
                        jump_right_local = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    }
                    jump_right_local.GetComponent<Renderer>().material.SetColor("_Color", Color.blue);
                    if (invis)
                    {
                        UnityEngine.Object.Destroy(jump_right_local.GetComponent<Renderer>());
                    }
                    jump_right_local.transform.localScale = scale;
                    jump_right_local.transform.position = new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.rightControllerTransform.position;
                    jump_right_local.transform.rotation = GorillaLocomotion.Player.Instance.rightControllerTransform.rotation;
                    object[] eventContent = new object[2]
                    {
                    new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.rightControllerTransform.position,
                    GorillaLocomotion.Player.Instance.rightControllerTransform.rotation
                    };
                    RaiseEventOptions raiseEventOptions = new RaiseEventOptions
                    {
                        Receivers = ReceiverGroup.Others
                    };
                    PhotonNetwork.RaiseEvent(70, eventContent, raiseEventOptions, SendOptions.SendReliable);
                    once_right = true;
                    once_right_false = false;
                    ColorChanger colorChanger = jump_right_local.AddComponent<ColorChanger>();
                    Gradient gradient = new Gradient();
                    gradient.colorKeys = colorKeysPlatformMonke;
                    colorChanger.colors = gradient;
                    colorChanger.Start();
                }
            }
            else if (!once_right_false && jump_right_local != null)
            {
                UnityEngine.Object.Destroy(jump_right_local);
                jump_right_local = null;
                once_right = false;
                once_right_false = true;
                RaiseEventOptions raiseEventOptions2 = new RaiseEventOptions
                {
                    Receivers = ReceiverGroup.Others
                };
                PhotonNetwork.RaiseEvent(72, null, raiseEventOptions2, SendOptions.SendReliable);
            }
            if (inputl)
            {
                if (!once_left && jump_left_local == null)
                {
                    if (sticky)
                    {
                        jump_left_local = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    }
                    else
                    {
                        jump_left_local = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    }
                    jump_left_local.GetComponent<Renderer>().material.SetColor("_Color", Color.cyan);
                    if (invis)
                    {
                        UnityEngine.Object.Destroy(jump_left_local.GetComponent<Renderer>());
                    }
                    jump_left_local.transform.localScale = scale;
                    jump_left_local.transform.position = new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.leftControllerTransform.position;
                    jump_left_local.transform.rotation = GorillaLocomotion.Player.Instance.leftControllerTransform.rotation;
                    object[] eventContent2 = new object[2]
                    {
                    new Vector3(0f, -0.0100f, 0f) + GorillaLocomotion.Player.Instance.leftControllerTransform.position,
                    GorillaLocomotion.Player.Instance.leftControllerTransform.rotation
                    };
                    RaiseEventOptions raiseEventOptions3 = new RaiseEventOptions
                    {
                        Receivers = ReceiverGroup.Others
                    };
                    PhotonNetwork.RaiseEvent(69, eventContent2, raiseEventOptions3, SendOptions.SendReliable);
                    once_left = true;
                    once_left_false = false;
                    ColorChanger colorChanger2 = jump_left_local.AddComponent<ColorChanger>();
                    Gradient gradient2 = new Gradient();
                    gradient2.colorKeys = colorKeysPlatformMonke;
                    colorChanger2.colors = gradient2;
                    colorChanger2.Start();
                }
            }
            else if (!once_left_false && jump_left_local != null)
            {
                UnityEngine.Object.Destroy(jump_left_local);
                jump_left_local = null;
                once_left = false;
                once_left_false = true;
                RaiseEventOptions raiseEventOptions4 = new RaiseEventOptions
                {
                    Receivers = ReceiverGroup.Others
                };
                PhotonNetwork.RaiseEvent(71, null, raiseEventOptions4, SendOptions.SendReliable);
            }
            if (!PhotonNetwork.InRoom)
            {
                for (int i = 0; i < jump_right_network.Length; i++)
                {
                    UnityEngine.Object.Destroy(jump_right_network[i]);
                }
                for (int j = 0; j < jump_left_network.Length; j++)
                {
                    UnityEngine.Object.Destroy(jump_left_network[j]);
                }
            }
        }













        public static void DisconnectOnX()
        {
            if (InputLib.X())
            {
                PhotonNetwork.Disconnect();
            }
        }
        public static void ChangeLayout()
        {
            LayoutIndex++;
            Main.RecreateMenu();
        }
        public static void SuperMonke()
        {
            if (InputLib.B() || InputLib.A())
            {
                GorillaTagger.Instance.transform.position += GorillaTagger.Instance.headCollider.transform.forward * 15 * Time.deltaTime;
                GorillaTagger.Instance.rigidbody.velocity = Vector3.zero;
            }
        }

        public static void TeleportGun()
        {
            if (ControllerInputPoller.instance.rightGrab)
            {
                RaycastHit raycastHit;
                if (Physics.Raycast(GorillaLocomotion.Player.Instance.rightControllerTransform.position - GorillaLocomotion.Player.Instance.rightControllerTransform.up, -GorillaLocomotion.Player.Instance.rightControllerTransform.up, out raycastHit) && pointer2 == null)
                {
                    GameObject pointer = GameObject.CreatePrimitive(PrimitiveType.Sphere);
                    pointer.GetComponent<Renderer>().material.color = Color.white;
                    pointer.GetComponent<Renderer>().material.shader = Shader.Find("GUI/Text Shader");
                    pointer.transform.localScale = new Vector3(0.1f, 0.1f, 0.1f);
                    pointer.transform.position = raycastHit.point;
                    UnityEngine.Object.Destroy(pointer.GetComponent<BoxCollider>());
                    UnityEngine.Object.Destroy(pointer.GetComponent<Rigidbody>());
                    UnityEngine.Object.Destroy(pointer.GetComponent<Collider>());
                    UnityEngine.Object.Destroy(pointer, Time.deltaTime);

                    GameObject LineRenderer = new GameObject("Line");
                    LineRenderer Line = LineRenderer.AddComponent<LineRenderer>();
                    Line.material.shader = Shader.Find("GUI/Text Shader");
                    Line.startColor = Color.white;
                    Line.endColor = Color.white;
                    Line.startWidth = 0.02f;
                    Line.endWidth = 0.02f;
                    Line.positionCount = 2;
                    Line.useWorldSpace = true;
                    Line.SetPosition(0, GorillaTagger.Instance.rightHandTransform.position);
                    Line.SetPosition(1, raycastHit.point);
                    UnityEngine.Object.Destroy(LineRenderer, Time.deltaTime);
                }
                if (ControllerInputPoller.TriggerFloat(XRNode.RightHand) > 0.5f && Time.time > Delay)
                {
                    GorillaTagger.Instance.rigidbody.transform.position = raycastHit.point;
                    GorillaLocomotion.Player.Instance.GetComponent<Rigidbody>().velocity = Vector3.zero;
                    Delay = Time.time + 0.5f;
                }
            }
            else
            {
                UnityEngine.Object.Destroy((UnityEngine.Object)pointer2);
            }
        }

        public static float Delay;


        static GameObject rrr;
        static GameObject lll;
        private static object pointer2;

        public static void Platformers(bool invis)
        {
            if (InputLib.RG() || InputLib.LG())
            {
                if (InputLib.RG() && rrr == null)
                {
                    rrr = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    rrr.transform.localScale = new Vector3(0.2f, 0.124f, 0.2f);
                    rrr.transform.position = GorillaTagger.Instance.rightHandTransform.position;
                    rrr.transform.rotation = GorillaTagger.Instance.rightHandTransform.rotation;

                    if (!invis)
                    {
                        rrr.GetComponent<Renderer>().material = Variables.Uber;
                        rrr.GetComponent<Renderer>().material.color = Color.black;
                    }
                    else
                    {
                        GameObject.Destroy(rrr.GetComponent<Renderer>());
                        GameObject.Destroy(rrr.GetComponent<MeshRenderer>());
                    }
                   

                    GameObject.Destroy(rrr.GetComponent<Rigidbody>());
                    GameObject.Destroy(rrr.GetComponent<Rigidbody2D>());
                }
                if (InputLib.LG() && lll == null)
                {
                    lll = GameObject.CreatePrimitive(PrimitiveType.Cube);
                    lll.transform.localScale = new Vector3(0.2f, 0.124f, 0.2f);
                    lll.transform.position = GorillaTagger.Instance.leftHandTransform.position;
                    lll.transform.rotation = GorillaTagger.Instance.leftHandTransform.rotation;

                    if (!invis)
                    {
                        lll.GetComponent<Renderer>().material = Variables.Uber;
                        lll.GetComponent<Renderer>().material.color = Color.black;
                    }
                    else
                    {
                        GameObject.Destroy(lll.GetComponent<Renderer>());
                        GameObject.Destroy(lll.GetComponent<MeshRenderer>());
                    }

                    GameObject.Destroy(lll.GetComponent<Rigidbody>());
                    GameObject.Destroy(lll.GetComponent<Rigidbody2D>());
                }
            }
            if (!InputLib.RG())
            {
                GameObject.Destroy(rrr);
                rrr = null;
            }
            if (!InputLib.LG())
            {
                GameObject.Destroy(lll);
                lll = null;
            }
        }
        public static void TpGunModule(Vector3 postioototntntnnt)
        {
            if (Time.time > Variables.TpCooldown + 0.5f)
            {
                Variables.TpCooldown = Time.time;
                GorillaTagger.Instance.transform.position = postioototntntnnt;
            }
        }
        public static void TpGun()
        {
            GunLib.Gun(() => TpGunModule(GunLib.PointerObj.transform.position), false);
        }


    }
}
